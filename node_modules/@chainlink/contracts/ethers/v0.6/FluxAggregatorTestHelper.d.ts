/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface FluxAggregatorTestHelperInterface extends Interface {
  functions: {
    acceptOwnership: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    readGetAnswer: TypedFunctionDescription<{
      encode([_aggregator, _roundID]: [string, BigNumberish]): string;
    }>;

    readGetTimestamp: TypedFunctionDescription<{
      encode([_aggregator, _roundID]: [string, BigNumberish]): string;
    }>;

    readLatestAnswer: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readLatestTimestamp: TypedFunctionDescription<{
      encode([_aggregator]: [string]): string;
    }>;

    readOracleRoundState: TypedFunctionDescription<{
      encode([_aggregator, _oracle]: [string, string]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([_to]: [string]): string;
    }>;
  };

  events: {
    Here: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    OwnershipTransferRequested: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([from, to]: [string | null, string | null]): string[];
    }>;
  };
}

export class FluxAggregatorTestHelper extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): FluxAggregatorTestHelper;
  attach(addressOrName: string): FluxAggregatorTestHelper;
  deployed(): Promise<FluxAggregatorTestHelper>;

  on(event: EventFilter | string, listener: Listener): FluxAggregatorTestHelper;
  once(
    event: EventFilter | string,
    listener: Listener
  ): FluxAggregatorTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): FluxAggregatorTestHelper;
  removeAllListeners(eventName: EventFilter | string): FluxAggregatorTestHelper;
  removeListener(eventName: any, listener: Listener): FluxAggregatorTestHelper;

  interface: FluxAggregatorTestHelperInterface;

  functions: {
    acceptOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    owner(): Promise<string>;

    readGetAnswer(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readGetTimestamp(
      _aggregator: string,
      _roundID: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestAnswer(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readLatestTimestamp(
      _aggregator: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    readOracleRoundState(
      _aggregator: string,
      _oracle: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  owner(): Promise<string>;

  readGetAnswer(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readGetTimestamp(
    _aggregator: string,
    _roundID: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestAnswer(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readLatestTimestamp(
    _aggregator: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  readOracleRoundState(
    _aggregator: string,
    _oracle: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Here(): EventFilter;

    OwnershipTransferRequested(
      from: string | null,
      to: string | null
    ): EventFilter;

    OwnershipTransferred(from: string | null, to: string | null): EventFilter;
  };

  estimate: {
    acceptOwnership(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    readGetAnswer(
      _aggregator: string,
      _roundID: BigNumberish
    ): Promise<BigNumber>;

    readGetTimestamp(
      _aggregator: string,
      _roundID: BigNumberish
    ): Promise<BigNumber>;

    readLatestAnswer(_aggregator: string): Promise<BigNumber>;

    readLatestTimestamp(_aggregator: string): Promise<BigNumber>;

    readOracleRoundState(
      _aggregator: string,
      _oracle: string
    ): Promise<BigNumber>;

    transferOwnership(_to: string): Promise<BigNumber>;
  };
}
