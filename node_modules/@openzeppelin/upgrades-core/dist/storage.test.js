"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const fs_1 = require("fs");
const utils_1 = require("solidity-ast/utils");
const storage_1 = require("./storage");
const test = ava_1.default;
test.before(async (t) => {
    const solcOutput = JSON.parse(await fs_1.promises.readFile('cache/solc-output.json', 'utf8'));
    t.context.contracts = {};
    for (const def of utils_1.findAll('ContractDefinition', solcOutput.sources['contracts/test/Storage.sol'].ast)) {
        t.context.contracts[def.name] = def;
    }
});
const dummyDecodeSrc = () => 'file.sol:1';
test('Storage1', t => {
    const contract = 'Storage1';
    const def = t.context.contracts[contract];
    const layout = storage_1.extractStorageLayout(def, dummyDecodeSrc);
    t.snapshot(stabilizeStorageLayout(layout));
});
test('Storage2', t => {
    const contract = 'Storage2';
    const def = t.context.contracts[contract];
    const layout = storage_1.extractStorageLayout(def, dummyDecodeSrc);
    t.snapshot(stabilizeStorageLayout(layout));
});
test('storage upgrade equal', t => {
    const v1 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Equal_V1'], dummyDecodeSrc);
    const v2 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Equal_V2'], dummyDecodeSrc);
    const comparison = storage_1.getStorageUpgradeErrors(v1, v2);
    t.deepEqual(comparison, []);
});
test('storage upgrade append', t => {
    const v1 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Append_V1'], dummyDecodeSrc);
    const v2 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Append_V2'], dummyDecodeSrc);
    const comparison = storage_1.getStorageUpgradeErrors(v1, v2);
    t.deepEqual(comparison, []);
});
test('storage upgrade delete', t => {
    const v1 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Delete_V1'], dummyDecodeSrc);
    const v2 = storage_1.extractStorageLayout(t.context.contracts['StorageUpgrade_Delete_V2'], dummyDecodeSrc);
    const comparison = storage_1.getStorageUpgradeErrors(v1, v2);
    t.deepEqual(comparison, [
        {
            kind: 'delete',
            original: {
                contract: 'StorageUpgrade_Delete_V1',
                label: 'x1',
                type: 't_uint256',
                src: 'file.sol:1',
            },
        },
    ]);
});
function stabilizeStorageLayout(layout) {
    return {
        storage: layout.storage.map(s => ({ ...s, type: storage_1.stabilizeTypeIdentifier(s.type) })),
        types: Object.entries(layout.types).map(([type, item]) => [storage_1.stabilizeTypeIdentifier(type), item]),
    };
}
//# sourceMappingURL=storage.test.js.map