import { ContractDefinition } from 'solidity-ast';
import { SrcDecoder } from './src-decoder';
import { Operation } from './levenshtein';
export interface StorageItem {
    contract: string;
    label: string;
    type: string;
    src: string;
}
export interface StorageLayout {
    storage: StorageItem[];
    types: Record<string, TypeItem>;
}
export interface TypeItem {
    label: string;
    members?: TypeItemMembers;
}
export declare type TypeItemMembers = StructMember[] | EnumMember[];
export interface StructMember {
    label: string;
    type: string;
}
declare type EnumMember = string;
export declare function extractStorageLayout(contractDef: ContractDefinition, decodeSrc: SrcDecoder): StorageLayout;
export declare function assertStorageUpgradeSafe(original: StorageLayout, updated: StorageLayout, unsafeAllowCustomTypes?: boolean): void;
export declare function describeError(e: StorageOperation): string;
declare type StorageOperation = Operation<StorageItem, 'typechange' | 'rename' | 'replace'>;
export declare function getStorageUpgradeErrors(original: StorageLayout, updated: StorageLayout): StorageOperation[];
export declare function decodeTypeIdentifier(typeIdentifier: string): string;
export declare function stabilizeTypeIdentifier(typeIdentifier: string): string;
export {};
//# sourceMappingURL=storage.d.ts.map