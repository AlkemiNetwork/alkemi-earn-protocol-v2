{
	"schemaVersion": "2.0.0",
	"contractName": "VRFCoordinator",
	"compilerOutput": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_link",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "NewServiceAgreement",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "keyHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "seed",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "jobID",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "RandomnessRequest",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "callbacks",
				"outputs": [
					{
						"internalType": "address",
						"name": "callbackContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "randomnessFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "seed",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_proof",
						"type": "bytes"
					}
				],
				"name": "fulfillRandomnessRequest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[2]",
						"name": "_publicKey",
						"type": "uint256[2]"
					}
				],
				"name": "hashOfKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "onTokenTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_fee",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_oracle",
						"type": "address"
					},
					{
						"internalType": "uint256[2]",
						"name": "_publicProvingKey",
						"type": "uint256[2]"
					},
					{
						"internalType": "bytes32",
						"name": "_jobID",
						"type": "bytes32"
					}
				],
				"name": "registerProvingKey",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "serviceAgreements",
				"outputs": [
					{
						"internalType": "address",
						"name": "vRFOracle",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "jobID",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "withdrawableTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"fulfillRandomnessRequest(bytes)": {
					"details": "This is the main entrypoint for chainlink. If you change this, youshould also change the solidityABISstring in solidity_proof.go.",
					"params": {
						"_proof": "the proof of randomness. Actual random output built from this"
					}
				},
				"hashOfKey(uint256[2])": {
					"params": {
						"_publicKey": "the key to return the address for"
					}
				},
				"onTokenTransfer(address,uint256,bytes)": {
					"details": "To invoke this, use the requestRandomness method in VRFConsumerBase.The VRFCoordinator will call back to the calling contract when theoracle responds, on the method fulfillRandomness. SeeVRFConsumerBase.fullfilRandomnessRequest for its signature. Yourconsuming contract should inherit from VRFConsumerBase, and implementfullfilRandomnessRequest.",
					"params": {
						"_data": "abi-encoded call to randomnessRequest",
						"_fee": "amount of LINK sent",
						"_sender": "address: who sent the LINK (must be a contract)"
					}
				},
				"registerProvingKey(uint256,address,uint256[2],bytes32)": {
					"params": {
						"_fee": "minimum LINK payment required to serve randomness",
						"_jobID": "ID of the corresponding chainlink job in the oracle's db",
						"_oracle": "the address of the Chainlink node with the proving key and job",
						"_publicProvingKey": "public key used to prove randomness"
					}
				},
				"withdraw(address,uint256)": {
					"details": "Allows the oracle operator to withdraw their LINK",
					"params": {
						"_amount": "is the amount of LINK transfered from the Coordinator contract",
						"_recipient": "is the address the funds will be sent to"
					}
				}
			},
			"title": "VRFCoordinator coordinates on-chain verifiable-randomness requestswith off-chain responses"
		},
		"evm": {
			"bytecode": {
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b506040516121cc3803806121cc8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055612167806100656000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c8063a4c0ed361161005b578063a4c0ed36146101fa578063caf70c4a146102c4578063d83402091461030f578063f3fef3a31461035357610087565b80626f6ad01461008c57806321f36509146100d15780635e1c10591461012357806375d35070146101dd575b600080fd5b6100bf600480360360208110156100a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661038c565b60408051918252519081900360200190f35b6100ee600480360360208110156100e757600080fd5b503561039e565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b6101c96004803603602081101561013957600080fd5b81019060208101813564010000000081111561015457600080fd5b82018360208201111561016657600080fd5b8035906020019184600183028401116401000000008311171561018857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103d7945050505050565b604080519115158252519081900360200190f35b6100ee600480360360208110156101f357600080fd5b50356106c5565b6102c26004803603606081101561021057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184600183028401116401000000008311171561028157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106fe945050505050565b005b6100bf600480360360408110156102da57600080fd5b604080518082018252918301929181830191839060029083908390808284376000920191909152509194506107bd9350505050565b6102c2600480360360a081101561032557600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604081019060800135610812565b6102c26004803603604081101561036957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109f5565b60036020526000908152604090205481565b600160208190526000918252604090912080549181015460029091015473ffffffffffffffffffffffffffffffffffffffff9092169183565b60006103e161203f565b5060e0820151602083019060006103f7836107bd565b905060006104058284610b57565b905061040f61205d565b506000818152600160208181526040928390208351606081018552815473ffffffffffffffffffffffffffffffffffffffff16808252938201549281019290925260020154928101929092526104c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6e6f20636f72726573706f6e64696e6720726571756573740000000000000000604482015290519081900360640190fd5b60006104d188610b86565b6000858152600260209081526040808320548683015173ffffffffffffffffffffffffffffffffffffffff90911680855260039093529220549293509161051d9163ffffffff610cf416565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600360209081526040808320949094558351602481018990526044808201889052855180830390910181526064909101855290810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f94985ddd00000000000000000000000000000000000000000000000000000000178152875194518251939592948694931692859282918083835b6020831061060757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016105ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610669576040519150601f19603f3d011682016040523d82523d6000602084013e61066e565b606091505b50506000978852600160208190526040892080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155908101899055600201979097555094985050505050505050505b919050565b600260208190526000918252604090912080546001820154919092015473ffffffffffffffffffffffffffffffffffffffff9092169183565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b60008082806020019051604081101561079c57600080fd5b50805160209091015190925090506107b682828688610d6f565b5050505050565b6000816040516020018082600260200280838360005b838110156107eb5781810151838201526020016107d3565b50505050905001915050604051602081830303815290604052805190602001209050919050565b6040805180820182526000916108419190859060029083908390808284376000920191909152506107bd915050565b60008181526002602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1680156108d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f706c656173652072656769737465722061206e6577206b657900000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851661095857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5f6f7261636c65206d757374206e6f7420626520307830000000000000000000604482015290519081900360640190fd5b60008281526002602081815260409283902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617815560018101879055909101889055815184815290810188905281517fae189157e0628c1e62315e9179156e1ea10e90e9c15060002f7021e907dc2cfe929181900390910190a1505050505050565b336000908152600360205260409020548190811115610a7557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f63616e2774207769746864726177206d6f7265207468616e2062616c616e6365604482015290519081900360640190fd5b33600090815260036020526040902054610a95908363ffffffff610fa316565b33600090815260036020908152604080832093909355815483517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018890529451949091169363a9059cbb93604480840194938390030190829087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050506040513d6020811015610b4a57600080fd5b5051610b5257fe5b505050565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b60006101a0825114610bf957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015290519081900360640190fd5b610c0161203f565b610c0961203f565b610c11612094565b6000610c1b61203f565b610c2361203f565b6000888060200190516101a0811015610c3b57600080fd5b5060e0810151610180820151919850604089019750608089019650945061010088019350610140880192509050610c8e87878760006020020151886001602002015189600260200201518989898961101a565b6003866040516020018083815260200182600260200280838360005b83811015610cc2578181015183820152602001610caa565b50505050905001925050506040516020818303038152906040528051906020012060001c975050505050505050919050565b600082820183811015610d6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b81846002600082815260200190815260200160002060020154821015610df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f42656c6f7720616772656564207061796d656e74000000000000000000000000604482015290519081900360640190fd5b600086815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490610e338888878561131b565b90506000610e418983610b57565b60008181526001602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615610e7057fe5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff8c167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811782558185018d905560029182018890558e8652908352938190209092015482518d815291820186905281830193909352606081018a905290517fd241d78a52145a5d1d1ff002e32ec15cdc395631bcee66246650c2429dfaccaa9181900360800190a2600089815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a168452909152902054610f6490600163ffffffff610cf416565b6000998a52600460209081526040808c2073ffffffffffffffffffffffffffffffffffffffff9099168c52979052959098209490945550505050505050565b60008282111561101457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6110238961136f565b61108e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e206375727665000000000000604482015290519081900360640190fd5b6110978861136f565b61110257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f67616d6d61206973206e6f74206f6e2063757276650000000000000000000000604482015290519081900360640190fd5b61110b8361136f565b61117657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e206375727665000000604482015290519081900360640190fd5b61117f8261136f565b6111ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e20637572766500000000604482015290519081900360640190fd5b6111f6878a88876113b3565b61126157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6164647228632a706b2b732a6729e289a05f755769746e657373000000000000604482015290519081900360640190fd5b61126961203f565b6112738a8761157f565b905061127d61203f565b61128c898b878b868989611622565b9050600061129d838d8d8a86611795565b9050808a1461130d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015290519081900360640190fd5b505050505050505050505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60208101516000907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f9080096113ac8360005b60200201516118b8565b1492915050565b600073ffffffffffffffffffffffffffffffffffffffff821661143757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f626164207769746e657373000000000000000000000000000000000000000000604482015290519081900360640190fd5b60208401516000906001161561144e57601c611451565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418587600060200201510986517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414191820392506000919089098751604080516000808252602082810180855288905260ff8916838501526060830194909452608082018590529151939450909260019260a08084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561152c573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff9081169088161495505050505050949350505050565b61158761203f565b6115e5600184846040516020018084815260200183600260200280838360005b838110156115bf5781810151838201526020016115a7565b505050509050018281526020019350505050604051602081830303815290604052611910565b90505b6115f18161136f565b610b8057805160408051602081810193909352815180820390930183528101905261161b90611910565b90506115e8565b61162a61203f565b825186517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f919003066116be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e63740000604482015290519081900360640190fd5b6116c9878988611978565b61171e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120ef6021913960400191505060405180910390fd5b611729848685611978565b61177e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806121106022913960400191505060405180910390fd5b611789868484611ade565b98975050505050505050565b6000600286868685876040516020018087815260200186600260200280838360005b838110156117cf5781810151838201526020016117b7565b5050505090500185600260200280838360005b838110156117fa5781810151838201526020016117e2565b5050505090500184600260200280838360005b8381101561182557818101518382015260200161180d565b5050505090500183600260200280838360005b83811015611850578181015183820152602001611838565b505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140196505050505050506040516020818303038152906040528051906020012060001c905095945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600782089392505050565b61191861203f565b61192182611c0c565b81526119366119318260006113a2565b611c61565b6020820181905260029006600114156106c0576020810180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f039052919050565b60008261198457600080fd5b835160208501516000906001161561199d57601c6119a0565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141838709604080516000808252602080830180855282905260ff871683850152606083018890526080830185905292519394509260019260a08084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611a42573d6000803e3d6000fd5b5050506020604051035190506000866040516020018082600260200280838360005b83811015611a7c578181015183820152602001611a64565b505050509050019150506040516020818303038152906040528051906020012060001c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b611ae661203f565b835160208086015185519186015160009384938493611b0793909190611c8d565b919450925090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f858209600114611ba057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a00000000000000604482015290519081900360640190fd5b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80611bd357fe5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8785099052979650505050505050565b805160208201205b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f81106106c057604080516020808201939093528151808203840181529082019091528051910120611c14565b6000610b80827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c611e23565b60008080600180827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a0890506000611d3583838585611f1c565b9098509050611d4688828e88611f74565b9098509050611d5788828c87611f74565b90985090506000611d6a8d878b85611f74565b9098509050611d7b88828686611f1c565b9098509050611d8c88828e89611f74565b9098509050818114611e0f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183099650611e13565b8196505b5050505050509450945094915050565b600080611e2e6120b2565b6020808252818101819052604082015260608101859052608081018490527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f60a0820152611e7a6120d0565b60208160c08460057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa925082611f1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6269674d6f64457870206661696c757265210000000000000000000000000000604482015290519081900360640190fd5b5195945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487099097909650945050505050565b600080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f86890990999098509650505050505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b6040518060200160405280600190602082028036833750919291505056fe4669727374206d756c7469706c69636174696f6e20636865636b206661696c65645365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c6564a26469706673582212202f988a79b2ec9c0e242162ae1cbf4f89810b9b2ac839ca8e440ef315fee3198064736f6c63430006060033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x21CC CODESIZE SUB DUP1 PUSH2 0x21CC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x2167 DUP1 PUSH2 0x65 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xCAF70C4A EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0xD8340209 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x353 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x6F6AD0 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x21F36509 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x5E1C1059 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x75D35070 EQ PUSH2 0x1DD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x3D7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x6FE SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE SWAP2 DUP4 ADD SWAP3 SWAP2 DUP2 DUP4 ADD SWAP2 DUP4 SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP2 SWAP5 POP PUSH2 0x7BD SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x812 JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1 PUSH2 0x203F JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x0 PUSH2 0x3F7 DUP4 PUSH2 0x7BD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x405 DUP3 DUP5 PUSH2 0xB57 JUMP JUMPDEST SWAP1 POP PUSH2 0x40F PUSH2 0x205D JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x4C6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F20636F72726573706F6E64696E6720726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D1 DUP9 PUSH2 0xB86 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP7 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD SWAP3 SWAP4 POP SWAP2 PUSH2 0x51D SWAP2 PUSH4 0xFFFFFFFF PUSH2 0xCF4 AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD PUSH1 0x24 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP6 MSTORE SWAP1 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x94985DDD00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE DUP8 MLOAD SWAP5 MLOAD DUP3 MLOAD SWAP4 SWAP6 SWAP3 SWAP5 DUP7 SWAP5 SWAP4 AND SWAP3 DUP6 SWAP3 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x607 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x5CA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x66E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x0 SWAP8 DUP9 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP10 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP2 SSTORE SWAP1 DUP2 ADD DUP10 SWAP1 SSTORE PUSH1 0x2 ADD SWAP8 SWAP1 SWAP8 SSTORE POP SWAP5 SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP1 SWAP3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x784 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x79C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x7B6 DUP3 DUP3 DUP7 DUP9 PUSH2 0xD6F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x7D3 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x841 SWAP2 SWAP1 DUP6 SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x7BD SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706C656173652072656769737465722061206E6577206B657900000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x958 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F6F7261636C65206D757374206E6F7420626520307830000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP8 SWAP1 SSTORE SWAP1 SWAP2 ADD DUP9 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xAE189157E0628C1E62315E9179156E1EA10E90E9C15060002F7021E907DC2CFE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 SWAP1 DUP2 GT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E2774207769746864726177206D6F7265207468616E2062616C616E6365 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xA95 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xFA3 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP2 SLOAD DUP4 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE SWAP5 MLOAD SWAP5 SWAP1 SWAP2 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP5 ADD SWAP5 SWAP4 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xB52 JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 DUP4 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 MLOAD EQ PUSH2 0xBF9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xC01 PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC09 PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC11 PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1B PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC23 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1A0 DUP2 LT ISZERO PUSH2 0xC3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x180 DUP3 ADD MLOAD SWAP2 SWAP9 POP PUSH1 0x40 DUP10 ADD SWAP8 POP PUSH1 0x80 DUP10 ADD SWAP7 POP SWAP5 POP PUSH2 0x100 DUP9 ADD SWAP4 POP PUSH2 0x140 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0xC8E DUP8 DUP8 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x2 PUSH1 0x20 MUL ADD MLOAD DUP10 DUP10 DUP10 DUP10 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCAA JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xD68 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP5 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 LT ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42656C6F7720616772656564207061796D656E74000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0xE33 DUP9 DUP9 DUP8 DUP6 PUSH2 0x131B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE41 DUP10 DUP4 PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0xE70 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 OR DUP3 SSTORE DUP2 DUP6 ADD DUP14 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP9 SWAP1 SSTORE DUP15 DUP7 MSTORE SWAP1 DUP4 MSTORE SWAP4 DUP2 SWAP1 KECCAK256 SWAP1 SWAP3 ADD SLOAD DUP3 MLOAD DUP14 DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xD241D78A52145A5D1D1FF002E32EC15CDC395631BCEE66246650C2429DFACCAA SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xF64 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xCF4 AND JUMP JUMPDEST PUSH1 0x0 SWAP10 DUP11 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP13 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP10 AND DUP13 MSTORE SWAP8 SWAP1 MSTORE SWAP6 SWAP1 SWAP9 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1014 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1023 DUP10 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x108E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7075626C6963206B6579206973206E6F74206F6E206375727665000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1097 DUP9 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x1102 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x67616D6D61206973206E6F74206F6E2063757276650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x110B DUP4 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x1176 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6347616D6D615769746E657373206973206E6F74206F6E206375727665000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x117F DUP3 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x11EA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73486173685769746E657373206973206E6F74206F6E20637572766500000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x11F6 DUP8 DUP11 DUP9 DUP8 PUSH2 0x13B3 JUMP JUMPDEST PUSH2 0x1261 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164647228632A706B2B732A6729E289A05F755769746E657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1269 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x1273 DUP11 DUP8 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP PUSH2 0x127D PUSH2 0x203F JUMP JUMPDEST PUSH2 0x128C DUP10 DUP12 DUP8 DUP12 DUP7 DUP10 DUP10 PUSH2 0x1622 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x129D DUP4 DUP14 DUP14 DUP11 DUP7 PUSH2 0x1795 JUMP JUMPDEST SWAP1 POP DUP1 DUP11 EQ PUSH2 0x130D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C69642070726F6F6600000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SWAP1 DUP1 MULMOD PUSH2 0x13AC DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x18B8 JUMP JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1437 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626164207769746E657373000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 AND ISZERO PUSH2 0x144E JUMPI PUSH1 0x1C PUSH2 0x1451 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP6 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD MULMOD DUP7 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SWAP2 DUP3 SUB SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP10 MULMOD DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 ADD DUP1 DUP6 MSTORE DUP9 SWAP1 MSTORE PUSH1 0xFF DUP10 AND DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x152C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP9 AND EQ SWAP6 POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1587 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x15E5 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15BF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15A7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1910 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x136F JUMP JUMPDEST PUSH2 0xB80 JUMPI DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP4 ADD DUP4 MSTORE DUP2 ADD SWAP1 MSTORE PUSH2 0x161B SWAP1 PUSH2 0x1910 JUMP JUMPDEST SWAP1 POP PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x162A PUSH2 0x203F JUMP JUMPDEST DUP3 MLOAD DUP7 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SWAP2 SWAP1 SUB MOD PUSH2 0x16BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706F696E747320696E2073756D206D7573742062652064697374696E63740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x16C9 DUP8 DUP10 DUP9 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x171E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20EF PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1729 DUP5 DUP7 DUP6 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x177E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2110 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1789 DUP7 DUP5 DUP5 PUSH2 0x1ADE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP7 DUP7 DUP7 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17FA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17E2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1825 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x180D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1850 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1838 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 DUP5 DUP6 MULMOD DUP5 MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F PUSH1 0x7 DUP3 ADDMOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1918 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x1921 DUP3 PUSH2 0x1C0C JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1936 PUSH2 0x1931 DUP3 PUSH1 0x0 PUSH2 0x13A2 JUMP JUMPDEST PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SWAP1 MOD PUSH1 0x1 EQ ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1984 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 AND ISZERO PUSH2 0x199D JUMPI PUSH1 0x1C PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP4 DUP8 MULMOD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 DUP6 MSTORE DUP3 SWAP1 MSTORE PUSH1 0xFF DUP8 AND DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE SWAP3 MLOAD SWAP4 SWAP5 POP SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A7C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A64 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE6 PUSH2 0x203F JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 DUP7 ADD MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 PUSH2 0x1B07 SWAP4 SWAP1 SWAP2 SWAP1 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP6 DUP3 MULMOD PUSH1 0x1 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E765A206D75737420626520696E7665727365206F66207A00000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x1BD3 JUMPI INVALID JUMPDEST DUP8 DUP7 MULMOD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP6 MULMOD SWAP1 MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 LT PUSH2 0x6C0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB DUP5 ADD DUP2 MSTORE SWAP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB80 DUP3 PUSH32 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFF0C PUSH2 0x1E23 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x1 DUP1 DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP9 ADDMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP12 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP11 ADDMOD SWAP1 POP PUSH1 0x0 PUSH2 0x1D35 DUP4 DUP4 DUP6 DUP6 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D46 DUP9 DUP3 DUP15 DUP9 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D57 DUP9 DUP3 DUP13 DUP8 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x0 PUSH2 0x1D6A DUP14 DUP8 DUP12 DUP6 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D7B DUP9 DUP3 DUP7 DUP7 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D8C DUP9 DUP3 DUP15 DUP10 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1E0F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP11 MULMOD SWAP9 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP3 DUP10 MULMOD SWAP8 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP4 MULMOD SWAP7 POP PUSH2 0x1E13 JUMP JUMPDEST DUP2 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E2E PUSH2 0x20B2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1E7A PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xC0 DUP5 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL SWAP3 POP DUP3 PUSH2 0x1F12 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6269674D6F64457870206661696C757265210000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 DUP8 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 DUP8 MULMOD SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP6 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP4 ADDMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP7 DUP10 MULMOD SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP INVALID CHAINID PUSH10 0x727374206D756C746970 PUSH13 0x69636174696F6E20636865636B KECCAK256 PUSH7 0x61696C65645365 PUSH4 0x6F6E6420 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212202F988A PUSH26 0xB2EC9C0E242162AE1CBF4F89810B9B2AC839CA8E440EF315FEE3 NOT DUP1 PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ",
				"sourceMap": "310:8733:19:-:0;;;432:77;5:9:-1;2:2;;;27:1;24;17:12;2:2;432:77:19;;;;;;;;;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;432:77:19;472:4;:32;;-1:-1:-1;;;;;472:32:19;;;-1:-1:-1;;;;;;472:32:19;;;;;;;;;310:8733;;;;;;"
			},
			"deployedBytecode": {
				"immutableReferences": {},
				"linkReferences": {},
				"object": "0x608060405234801561001057600080fd5b50600436106100875760003560e01c8063a4c0ed361161005b578063a4c0ed36146101fa578063caf70c4a146102c4578063d83402091461030f578063f3fef3a31461035357610087565b80626f6ad01461008c57806321f36509146100d15780635e1c10591461012357806375d35070146101dd575b600080fd5b6100bf600480360360208110156100a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661038c565b60408051918252519081900360200190f35b6100ee600480360360208110156100e757600080fd5b503561039e565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b6101c96004803603602081101561013957600080fd5b81019060208101813564010000000081111561015457600080fd5b82018360208201111561016657600080fd5b8035906020019184600183028401116401000000008311171561018857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506103d7945050505050565b604080519115158252519081900360200190f35b6100ee600480360360208110156101f357600080fd5b50356106c5565b6102c26004803603606081101561021057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561024d57600080fd5b82018360208201111561025f57600080fd5b8035906020019184600183028401116401000000008311171561028157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106fe945050505050565b005b6100bf600480360360408110156102da57600080fd5b604080518082018252918301929181830191839060029083908390808284376000920191909152509194506107bd9350505050565b6102c2600480360360a081101561032557600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201351690604081019060800135610812565b6102c26004803603604081101561036957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356109f5565b60036020526000908152604090205481565b600160208190526000918252604090912080549181015460029091015473ffffffffffffffffffffffffffffffffffffffff9092169183565b60006103e161203f565b5060e0820151602083019060006103f7836107bd565b905060006104058284610b57565b905061040f61205d565b506000818152600160208181526040928390208351606081018552815473ffffffffffffffffffffffffffffffffffffffff16808252938201549281019290925260020154928101929092526104c657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6e6f20636f72726573706f6e64696e6720726571756573740000000000000000604482015290519081900360640190fd5b60006104d188610b86565b6000858152600260209081526040808320548683015173ffffffffffffffffffffffffffffffffffffffff90911680855260039093529220549293509161051d9163ffffffff610cf416565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600360209081526040808320949094558351602481018990526044808201889052855180830390910181526064909101855290810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f94985ddd00000000000000000000000000000000000000000000000000000000178152875194518251939592948694931692859282918083835b6020831061060757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016105ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610669576040519150601f19603f3d011682016040523d82523d6000602084013e61066e565b606091505b50506000978852600160208190526040892080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155908101899055600201979097555094985050505050505050505b919050565b600260208190526000918252604090912080546001820154919092015473ffffffffffffffffffffffffffffffffffffffff9092169183565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000604482015290519081900360640190fd5b60008082806020019051604081101561079c57600080fd5b50805160209091015190925090506107b682828688610d6f565b5050505050565b6000816040516020018082600260200280838360005b838110156107eb5781810151838201526020016107d3565b50505050905001915050604051602081830303815290604052805190602001209050919050565b6040805180820182526000916108419190859060029083908390808284376000920191909152506107bd915050565b60008181526002602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1680156108d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f706c656173652072656769737465722061206e6577206b657900000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851661095857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5f6f7261636c65206d757374206e6f7420626520307830000000000000000000604482015290519081900360640190fd5b60008281526002602081815260409283902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a1617815560018101879055909101889055815184815290810188905281517fae189157e0628c1e62315e9179156e1ea10e90e9c15060002f7021e907dc2cfe929181900390910190a1505050505050565b336000908152600360205260409020548190811115610a7557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f63616e2774207769746864726177206d6f7265207468616e2062616c616e6365604482015290519081900360640190fd5b33600090815260036020526040902054610a95908363ffffffff610fa316565b33600090815260036020908152604080832093909355815483517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018890529451949091169363a9059cbb93604480840194938390030190829087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b505050506040513d6020811015610b4a57600080fd5b5051610b5257fe5b505050565b604080516020808201859052818301849052825180830384018152606090920190925280519101205b92915050565b60006101a0825114610bf957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f77726f6e672070726f6f66206c656e6774680000000000000000000000000000604482015290519081900360640190fd5b610c0161203f565b610c0961203f565b610c11612094565b6000610c1b61203f565b610c2361203f565b6000888060200190516101a0811015610c3b57600080fd5b5060e0810151610180820151919850604089019750608089019650945061010088019350610140880192509050610c8e87878760006020020151886001602002015189600260200201518989898961101a565b6003866040516020018083815260200182600260200280838360005b83811015610cc2578181015183820152602001610caa565b50505050905001925050506040516020818303038152906040528051906020012060001c975050505050505050919050565b600082820183811015610d6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b81846002600082815260200190815260200160002060020154821015610df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f42656c6f7720616772656564207061796d656e74000000000000000000000000604482015290519081900360640190fd5b600086815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490610e338888878561131b565b90506000610e418983610b57565b60008181526001602052604090205490915073ffffffffffffffffffffffffffffffffffffffff1615610e7057fe5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff8c167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811782558185018d905560029182018890558e8652908352938190209092015482518d815291820186905281830193909352606081018a905290517fd241d78a52145a5d1d1ff002e32ec15cdc395631bcee66246650c2429dfaccaa9181900360800190a2600089815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a168452909152902054610f6490600163ffffffff610cf416565b6000998a52600460209081526040808c2073ffffffffffffffffffffffffffffffffffffffff9099168c52979052959098209490945550505050505050565b60008282111561101457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6110238961136f565b61108e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7075626c6963206b6579206973206e6f74206f6e206375727665000000000000604482015290519081900360640190fd5b6110978861136f565b61110257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f67616d6d61206973206e6f74206f6e2063757276650000000000000000000000604482015290519081900360640190fd5b61110b8361136f565b61117657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6347616d6d615769746e657373206973206e6f74206f6e206375727665000000604482015290519081900360640190fd5b61117f8261136f565b6111ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f73486173685769746e657373206973206e6f74206f6e20637572766500000000604482015290519081900360640190fd5b6111f6878a88876113b3565b61126157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f6164647228632a706b2b732a6729e289a05f755769746e657373000000000000604482015290519081900360640190fd5b61126961203f565b6112738a8761157f565b905061127d61203f565b61128c898b878b868989611622565b9050600061129d838d8d8a86611795565b9050808a1461130d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f6600000000000000000000000000000000000000604482015290519081900360640190fd5b505050505050505050505050565b604080516020808201969096528082019490945273ffffffffffffffffffffffffffffffffffffffff9290921660608401526080808401919091528151808403909101815260a09092019052805191012090565b60208101516000907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f9080096113ac8360005b60200201516118b8565b1492915050565b600073ffffffffffffffffffffffffffffffffffffffff821661143757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f626164207769746e657373000000000000000000000000000000000000000000604482015290519081900360640190fd5b60208401516000906001161561144e57601c611451565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418587600060200201510986517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414191820392506000919089098751604080516000808252602082810180855288905260ff8916838501526060830194909452608082018590529151939450909260019260a08084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561152c573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff9081169088161495505050505050949350505050565b61158761203f565b6115e5600184846040516020018084815260200183600260200280838360005b838110156115bf5781810151838201526020016115a7565b505050509050018281526020019350505050604051602081830303815290604052611910565b90505b6115f18161136f565b610b8057805160408051602081810193909352815180820390930183528101905261161b90611910565b90506115e8565b61162a61203f565b825186517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f919003066116be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f706f696e747320696e2073756d206d7573742062652064697374696e63740000604482015290519081900360640190fd5b6116c9878988611978565b61171e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120ef6021913960400191505060405180910390fd5b611729848685611978565b61177e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806121106022913960400191505060405180910390fd5b611789868484611ade565b98975050505050505050565b6000600286868685876040516020018087815260200186600260200280838360005b838110156117cf5781810151838201526020016117b7565b5050505090500185600260200280838360005b838110156117fa5781810151838201526020016117e2565b5050505090500184600260200280838360005b8381101561182557818101518382015260200161180d565b5050505090500183600260200280838360005b83811015611850578181015183820152602001611838565b505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140196505050505050506040516020818303038152906040528051906020012060001c905095945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80848509840990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600782089392505050565b61191861203f565b61192182611c0c565b81526119366119318260006113a2565b611c61565b6020820181905260029006600114156106c0576020810180517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f039052919050565b60008261198457600080fd5b835160208501516000906001161561199d57601c6119a0565b601b5b905060007ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141838709604080516000808252602080830180855282905260ff871683850152606083018890526080830185905292519394509260019260a08084019391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015611a42573d6000803e3d6000fd5b5050506020604051035190506000866040516020018082600260200280838360005b83811015611a7c578181015183820152602001611a64565b505050509050019150506040516020818303038152906040528051906020012060001c90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614955050505050509392505050565b611ae661203f565b835160208086015185519186015160009384938493611b0793909190611c8d565b919450925090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f858209600114611ba057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f696e765a206d75737420626520696e7665727365206f66207a00000000000000604482015290519081900360640190fd5b60405180604001604052807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f80611bd357fe5b87860981526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8785099052979650505050505050565b805160208201205b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f81106106c057604080516020808201939093528151808203840181529082019091528051910120611c14565b6000610b80827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c611e23565b60008080600180827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a0890506000611d3583838585611f1c565b9098509050611d4688828e88611f74565b9098509050611d5788828c87611f74565b90985090506000611d6a8d878b85611f74565b9098509050611d7b88828686611f1c565b9098509050611d8c88828e89611f74565b9098509050818114611e0f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183099650611e13565b8196505b5050505050509450945094915050565b600080611e2e6120b2565b6020808252818101819052604082015260608101859052608081018490527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f60a0820152611e7a6120d0565b60208160c08460057ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa925082611f1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6269674d6f64457870206661696c757265210000000000000000000000000000604482015290519081900360640190fd5b5195945050505050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8487099097909650945050505050565b600080807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f86890990999098509650505050505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b6040518060200160405280600190602082028036833750919291505056fe4669727374206d756c7469706c69636174696f6e20636865636b206661696c65645365636f6e64206d756c7469706c69636174696f6e20636865636b206661696c6564a26469706673582212202f988a79b2ec9c0e242162ae1cbf4f89810b9b2ac839ca8e440ef315fee3198064736f6c63430006060033",
				"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA4C0ED36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xCAF70C4A EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0xD8340209 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x353 JUMPI PUSH2 0x87 JUMP JUMPDEST DUP1 PUSH3 0x6F6AD0 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x21F36509 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x5E1C1059 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x75D35070 EQ PUSH2 0x1DD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x38C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1C9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x3D7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x6C5 JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 0x60 DUP2 ADD PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x6FE SWAP5 POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xBF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE SWAP2 DUP4 ADD SWAP3 SWAP2 DUP2 DUP4 ADD SWAP2 DUP4 SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP2 SWAP5 POP PUSH2 0x7BD SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x812 JUMP JUMPDEST PUSH2 0x2C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x9F5 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E1 PUSH2 0x203F JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x0 PUSH2 0x3F7 DUP4 PUSH2 0x7BD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x405 DUP3 DUP5 PUSH2 0xB57 JUMP JUMPDEST SWAP1 POP PUSH2 0x40F PUSH2 0x205D JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0x60 DUP2 ADD DUP6 MSTORE DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH2 0x4C6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F20636F72726573706F6E64696E6720726571756573740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4D1 DUP9 PUSH2 0xB86 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP7 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP1 DUP6 MSTORE PUSH1 0x3 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD SWAP3 SWAP4 POP SWAP2 PUSH2 0x51D SWAP2 PUSH4 0xFFFFFFFF PUSH2 0xCF4 AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD PUSH1 0x24 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE DUP6 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD DUP6 MSTORE SWAP1 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x94985DDD00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE DUP8 MLOAD SWAP5 MLOAD DUP3 MLOAD SWAP4 SWAP6 SWAP3 SWAP5 DUP7 SWAP5 SWAP4 AND SWAP3 DUP6 SWAP3 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x607 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x5CA JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x669 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x66E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x0 SWAP8 DUP9 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP10 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND DUP2 SSTORE SWAP1 DUP2 ADD DUP10 SWAP1 SSTORE PUSH1 0x2 ADD SWAP8 SWAP1 SWAP8 SSTORE POP SWAP5 SWAP9 POP POP POP POP POP POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP2 SWAP1 SWAP3 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 DUP4 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x784 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x79C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x7B6 DUP3 DUP3 DUP7 DUP9 PUSH2 0xD6F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x7D3 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x841 SWAP2 SWAP1 DUP6 SWAP1 PUSH1 0x2 SWAP1 DUP4 SWAP1 DUP4 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x7BD SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706C656173652072656769737465722061206E6577206B657900000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x958 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5F6F7261636C65206D757374206E6F7420626520307830000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND OR DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP8 SWAP1 SSTORE SWAP1 SWAP2 ADD DUP9 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP9 SWAP1 MSTORE DUP2 MLOAD PUSH32 0xAE189157E0628C1E62315E9179156E1EA10E90E9C15060002F7021E907DC2CFE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 SWAP1 DUP2 GT ISZERO PUSH2 0xA75 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E2774207769746864726177206D6F7265207468616E2062616C616E6365 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xA95 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xFA3 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP2 SLOAD DUP4 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE SWAP5 MLOAD SWAP5 SWAP1 SWAP2 AND SWAP4 PUSH4 0xA9059CBB SWAP4 PUSH1 0x44 DUP1 DUP5 ADD SWAP5 SWAP4 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xB52 JUMPI INVALID JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 DUP4 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A0 DUP3 MLOAD EQ PUSH2 0xBF9 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x77726F6E672070726F6F66206C656E6774680000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xC01 PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC09 PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC11 PUSH2 0x2094 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC1B PUSH2 0x203F JUMP JUMPDEST PUSH2 0xC23 PUSH2 0x203F JUMP JUMPDEST PUSH1 0x0 DUP9 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x1A0 DUP2 LT ISZERO PUSH2 0xC3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x180 DUP3 ADD MLOAD SWAP2 SWAP9 POP PUSH1 0x40 DUP10 ADD SWAP8 POP PUSH1 0x80 DUP10 ADD SWAP7 POP SWAP5 POP PUSH2 0x100 DUP9 ADD SWAP4 POP PUSH2 0x140 DUP9 ADD SWAP3 POP SWAP1 POP PUSH2 0xC8E DUP8 DUP8 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD DUP9 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD DUP10 PUSH1 0x2 PUSH1 0x20 MUL ADD MLOAD DUP10 DUP10 DUP10 DUP10 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCC2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCAA JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP8 POP POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xD68 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP5 PUSH1 0x2 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD SLOAD DUP3 LT ISZERO PUSH2 0xDF6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x42656C6F7720616772656564207061796D656E74000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0xE33 DUP9 DUP9 DUP8 DUP6 PUSH2 0x131B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xE41 DUP10 DUP4 PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0xE70 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP13 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 OR DUP3 SSTORE DUP2 DUP6 ADD DUP14 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP9 SWAP1 SSTORE DUP15 DUP7 MSTORE SWAP1 DUP4 MSTORE SWAP4 DUP2 SWAP1 KECCAK256 SWAP1 SWAP3 ADD SLOAD DUP3 MLOAD DUP14 DUP2 MSTORE SWAP2 DUP3 ADD DUP7 SWAP1 MSTORE DUP2 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP2 ADD DUP11 SWAP1 MSTORE SWAP1 MLOAD PUSH32 0xD241D78A52145A5D1D1FF002E32EC15CDC395631BCEE66246650C2429DFACCAA SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG2 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xF64 SWAP1 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH2 0xCF4 AND JUMP JUMPDEST PUSH1 0x0 SWAP10 DUP11 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP13 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP10 AND DUP13 MSTORE SWAP8 SWAP1 MSTORE SWAP6 SWAP1 SWAP9 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1014 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1023 DUP10 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x108E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x7075626C6963206B6579206973206E6F74206F6E206375727665000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1097 DUP9 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x1102 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x67616D6D61206973206E6F74206F6E2063757276650000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x110B DUP4 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x1176 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6347616D6D615769746E657373206973206E6F74206F6E206375727665000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x117F DUP3 PUSH2 0x136F JUMP JUMPDEST PUSH2 0x11EA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x73486173685769746E657373206973206E6F74206F6E20637572766500000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x11F6 DUP8 DUP11 DUP9 DUP8 PUSH2 0x13B3 JUMP JUMPDEST PUSH2 0x1261 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6164647228632A706B2B732A6729E289A05F755769746E657373000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x1269 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x1273 DUP11 DUP8 PUSH2 0x157F JUMP JUMPDEST SWAP1 POP PUSH2 0x127D PUSH2 0x203F JUMP JUMPDEST PUSH2 0x128C DUP10 DUP12 DUP8 DUP12 DUP7 DUP10 DUP10 PUSH2 0x1622 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x129D DUP4 DUP14 DUP14 DUP11 DUP7 PUSH2 0x1795 JUMP JUMPDEST SWAP1 POP DUP1 DUP11 EQ PUSH2 0x130D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E76616C69642070726F6F6600000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x0 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SWAP1 DUP1 MULMOD PUSH2 0x13AC DUP4 PUSH1 0x0 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x18B8 JUMP JUMPDEST EQ SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1437 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x626164207769746E657373000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 AND ISZERO PUSH2 0x144E JUMPI PUSH1 0x1C PUSH2 0x1451 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP6 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD MULMOD DUP7 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 SWAP2 DUP3 SUB SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP10 MULMOD DUP8 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 ADD DUP1 DUP6 MSTORE DUP9 SWAP1 MSTORE PUSH1 0xFF DUP10 AND DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x152C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP9 AND EQ SWAP6 POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1587 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x15E5 PUSH1 0x1 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15BF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15A7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x1910 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x15F1 DUP2 PUSH2 0x136F JUMP JUMPDEST PUSH2 0xB80 JUMPI DUP1 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP4 ADD DUP4 MSTORE DUP2 ADD SWAP1 MSTORE PUSH2 0x161B SWAP1 PUSH2 0x1910 JUMP JUMPDEST SWAP1 POP PUSH2 0x15E8 JUMP JUMPDEST PUSH2 0x162A PUSH2 0x203F JUMP JUMPDEST DUP3 MLOAD DUP7 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SWAP2 SWAP1 SUB MOD PUSH2 0x16BE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x706F696E747320696E2073756D206D7573742062652064697374696E63740000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x16C9 DUP8 DUP10 DUP9 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x171E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20EF PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1729 DUP5 DUP7 DUP6 PUSH2 0x1978 JUMP JUMPDEST PUSH2 0x177E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2110 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1789 DUP7 DUP5 DUP5 PUSH2 0x1ADE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP7 DUP7 DUP7 DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17B7 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP6 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17FA JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17E2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP5 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1825 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x180D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1850 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1838 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 DUP5 DUP6 MULMOD DUP5 MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F PUSH1 0x7 DUP3 ADDMOD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1918 PUSH2 0x203F JUMP JUMPDEST PUSH2 0x1921 DUP3 PUSH2 0x1C0C JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1936 PUSH2 0x1931 DUP3 PUSH1 0x0 PUSH2 0x13A2 JUMP JUMPDEST PUSH2 0x1C61 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x2 SWAP1 MOD PUSH1 0x1 EQ ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB SWAP1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1984 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 AND ISZERO PUSH2 0x199D JUMPI PUSH1 0x1C PUSH2 0x19A0 JUMP JUMPDEST PUSH1 0x1B JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 DUP4 DUP8 MULMOD PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 DUP6 MSTORE DUP3 SWAP1 MSTORE PUSH1 0xFF DUP8 AND DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE SWAP3 MLOAD SWAP4 SWAP5 POP SWAP3 PUSH1 0x1 SWAP3 PUSH1 0xA0 DUP1 DUP5 ADD SWAP4 SWAP2 SWAP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH1 0x2 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A7C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A64 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE6 PUSH2 0x203F JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP1 DUP7 ADD MLOAD DUP6 MLOAD SWAP2 DUP7 ADD MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 PUSH2 0x1B07 SWAP4 SWAP1 SWAP2 SWAP1 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP6 DUP3 MULMOD PUSH1 0x1 EQ PUSH2 0x1BA0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E765A206D75737420626520696E7665727365206F66207A00000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP1 PUSH2 0x1BD3 JUMPI INVALID JUMPDEST DUP8 DUP7 MULMOD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP6 MULMOD SWAP1 MSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD KECCAK256 JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 LT PUSH2 0x6C0 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD DUP1 DUP3 SUB DUP5 ADD DUP2 MSTORE SWAP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB80 DUP3 PUSH32 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFF0C PUSH2 0x1E23 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH1 0x1 DUP1 DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP10 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP9 ADDMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP12 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB DUP11 ADDMOD SWAP1 POP PUSH1 0x0 PUSH2 0x1D35 DUP4 DUP4 DUP6 DUP6 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D46 DUP9 DUP3 DUP15 DUP9 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D57 DUP9 DUP3 DUP13 DUP8 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH1 0x0 PUSH2 0x1D6A DUP14 DUP8 DUP12 DUP6 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D7B DUP9 DUP3 DUP7 DUP7 PUSH2 0x1F1C JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP PUSH2 0x1D8C DUP9 DUP3 DUP15 DUP10 PUSH2 0x1F74 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP1 POP DUP2 DUP2 EQ PUSH2 0x1E0F JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP11 MULMOD SWAP9 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP3 DUP10 MULMOD SWAP8 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP4 MULMOD SWAP7 POP PUSH2 0x1E13 JUMP JUMPDEST DUP2 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1E2E PUSH2 0x20B2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1E7A PUSH2 0x20D0 JUMP JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xC0 DUP5 PUSH1 0x5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF STATICCALL SWAP3 POP DUP3 PUSH2 0x1F12 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6269674D6F64457870206661696C757265210000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST MLOAD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 DUP8 MULMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP5 DUP8 MULMOD SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP6 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP8 DUP8 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F SUB MULMOD SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP2 DUP4 ADDMOD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F DUP7 DUP10 MULMOD SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP INVALID CHAINID PUSH10 0x727374206D756C746970 PUSH13 0x69636174696F6E20636865636B KECCAK256 PUSH7 0x61696C65645365 PUSH4 0x6F6E6420 PUSH14 0x756C7469706C69636174696F6E20 PUSH4 0x6865636B KECCAK256 PUSH7 0x61696C6564A264 PUSH10 0x706673582212202F988A PUSH26 0xB2EC9C0E242162AE1CBF4F89810B9B2AC839CA8E440EF315FEE3 NOT DUP1 PUSH5 0x736F6C6343 STOP MOD MOD STOP CALLER ",
				"sourceMap": "310:8733:19:-:0;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;310:8733:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;1714:89:19;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1714:89:19;;;;:::i;:::-;;;;;;;;;;;;;;;;1554:70;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1554:70:19;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5647:1811;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;5647:1811:19;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;5647:1811:19;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;5647:1811:19;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;5647:1811:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;5647:1811:19;;-1:-1:-1;5647:1811:19;;-1:-1:-1;;;;;5647:1811:19:i;:::-;;;;;;;;;;;;;;;;;;1628:82;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1628:82:19;;:::i;3915:237::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;3915:237:19;;;;;;;;;;;;;;;;;;;;27:11:-1;11:28;;8:2;;;52:1;49;42:12;8:2;3915:237:19;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;3915:237:19;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;3915:237:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;3915:237:19;;-1:-1:-1;3915:237:19;;-1:-1:-1;;;;;3915:237:19:i;:::-;;8069:136;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;8069:136:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;8069:136:19;;-1:-1:-1;8069:136:19;;-1:-1:-1;;;;8069:136:19:i;2660:579::-;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;2660:579:19;;;;;;;;;;;;;;;;;;:::i;7681:236::-;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;7681:236:19;;;;;;;;;:::i;1714:89::-;;;;;;;;;;;;;:::o;1554:70::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5647:1811::-;5718:4;6158:27;;:::i;:::-;-1:-1:-1;6426:4:19;6414:17;;6408:24;6349:4;6337:17;;;6191:12;6519:20;6337:17;6519:9;:20::i;:::-;6494:45;;6545:17;6565:35;6579:14;6595:4;6565:13;:35::i;:::-;6545:55;;6606:24;;:::i;:::-;-1:-1:-1;6633:20:19;;;;:9;:20;;;;;;;;;6606:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6659:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6741:18;6762:35;6790:6;6762:27;:35::i;:::-;6825:12;6840:33;;;:17;:33;;;;;;;;:43;6945:22;;;;6840:43;;;;6916:24;;;:18;:24;;;;;;6741:56;;-1:-1:-1;6840:43:19;6916:52;;;:28;:52;:::i;:::-;6889:24;;;;;;;;:18;:24;;;;;;;;:79;;;;7170:85;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;7170:85:19;;;;;;25:18:-1;;;61:17;;7170:85:19;182:15:-1;7200:31:19;179:29:-1;160:49;;7334:25:19;;:36;;;;6889:24;;7170:85;;6889:24;;7334:30;;;7170:85;;7334:36;;;;25:18:-1;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;139:12;;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;7334:36:19;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;19;14:27;;;;67:4;61:11;56:16;;134:4;130:9;123:4;105:16;101:27;97:43;94:1;90:51;84:4;77:65;157:16;154:1;147:27;211:16;208:1;201:4;198:1;194:12;179:49;5:228;;14:27;32:4;27:9;;5:228;-1:-1;;7383:20:19;;;;:9;:20;;;;;;;7376:27;;;;;;;;;;;;;;;;;;-1:-1:-1;7316:54:19;;-1:-1:-1;;;;;;;;;5647:1811:19;;;;:::o;1628:82::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3915:237::-;8688:4;;;;8666:10;:27;8658:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4024:15:::1;4041:12:::0;4068:5:::1;4057:37;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;4057:37:19;;::::1;::::0;;::::1;::::0;;;-1:-1:-1;4057:37:19;-1:-1:-1;4100:47:19::1;4057:37:::0;;4133:4;4139:7;4100:17:::1;:47::i;:::-;8723:1;;3915:237:::0;;;:::o;8069:136::-;8139:7;8188:10;8171:28;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;8171:28:19;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;8171:28:19;;;8161:39;;;;;;8154:46;;8069:136;;;:::o;2660:579::-;2821:28;;;;;;;;2803:15;;2821:28;;;2831:17;;2821:28;;;;2831:17;;2821:28;2831:17;2821:28;1:33:-1;99:1;81:16;;74:27;;;;-1:-1;2821:9:19;;-1:-1:-1;;2821:28:19:i;:::-;2855:20;2878:26;;;:17;:26;;;;;:36;2803:46;;-1:-1:-1;2878:36:19;;2928:26;;2920:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2998:21;;;2990:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3053:26;;;;:17;:26;;;;;;;;;:46;;;;;;;;;;-1:-1:-1;3105:32:19;;:41;;;3152:30;;;:37;;;3200:34;;;;;;;;;;;;;;;;;;;;;;;;2660:579;;;;;;:::o;7681:236::-;8969:10;8950:30;;;;:18;:30;;;;;;7771:7;;8950:41;-1:-1:-1;8950:41:19;8942:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7840:10:::1;7821:30;::::0;;;:18:::1;:30;::::0;;;;;:43:::1;::::0;7856:7;7821:43:::1;:34;:43;:::i;:::-;7807:10;7788:30;::::0;;;:18:::1;:30;::::0;;;;;;;:76;;;;7877:4;;:34;;;;;7788:30:::1;7877:34:::0;;::::1;;::::0;::::1;::::0;;;;;;;;;:4;;;::::1;::::0;:13:::1;::::0;:34;;;;;7788:30;7877:34;;;;;;;:4;:34;::::1;;2:2:-1::0;::::1;;;27:1;24::::0;17:12:::1;2:2;7877:34:19;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;7877:34:19;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28::::0;21:12:::1;4:2;-1:-1:::0;7877:34:19;7870:42:::1;;;;7681:236:::0;;;:::o;1706:171:20:-;1830:41;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;1830:41:20;;;;;;;1820:52;;;;;1706:171;;;;;:::o;25549:997:17:-;25629:14;24630:315;25661:5;:12;:28;25653:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25721:20;;:::i;:::-;25794:23;;:::i;:::-;25903:24;;:::i;:::-;25935:16;25959:31;;:::i;:::-;25998:30;;:::i;:::-;26036:12;26143:5;26123:122;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;26123:122:17;;;;;;;;;;-1:-1:-1;26123:122:17;;;;-1:-1:-1;26123:122:17;;;;-1:-1:-1;26123:122:17;-1:-1:-1;26123:122:17;;;;-1:-1:-1;26123:122:17;;;;-1:-1:-1;26123:122:17;-1:-1:-1;26253:201:17;26123:122;;;26311:1;26304:9;;;;26328:6;26335:1;26328:9;;;;26352:6;26359:1;26352:9;;;;26379:8;26397:13;26420:12;26442:4;26253:14;:201::i;:::-;24518:1;26531:5;26489:48;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;26489:48:17;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;26489:48:17;;;26479:59;;;;;;26471:68;;26462:77;;25549:997;;;;;;;;;;:::o;822:162:51:-;880:7;907:5;;;926:6;;;;918:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;978:1;822:162;-1:-1:-1;;;822:162:51:o;4535:797:19:-;4682:8;4692;8500:17;:27;8518:8;8500:27;;;;;;;;;;;:31;;;8488:8;:43;;8480:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4710:13:::1;4726:16:::0;;;:6:::1;:16;::::0;;;;;;;:25:::1;::::0;::::1;::::0;;;;;;;;;4772:49:::1;4733:8:::0;4799:5;4743:7;4726:25;4772:16:::1;:49::i;:::-;4757:64;;4827:17;4847:29;4861:8;4871:4;4847:13;:29::i;:::-;5012:1;4963:20:::0;;;:9:::1;:20;::::0;;;;:37;4827:49;;-1:-1:-1;4963:51:19::1;:37;:51:::0;4956:59:::1;;;;5021:20;::::0;;;:9:::1;:20;::::0;;;;;;;:47;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;5074:34;;::::1;:45:::0;;;5125:25:::1;::::0;;::::1;:32:::0;;;5202:27;;;;;;;;;;:33;;::::1;::::0;5168:93;;;;;;;::::1;::::0;;;;;;;;;;;;;;;;;;::::1;::::0;;;;;;;::::1;5295:16;::::0;;;:6:::1;:16;::::0;;;;;;;:25:::1;::::0;::::1;::::0;;;;;;;;:32:::1;::::0;5325:1:::1;5295:32;:29;:32;:::i;:::-;5267:16;::::0;;;:6:::1;:16;::::0;;;;;;;:25:::1;::::0;;::::1;::::0;;;;;;;;;:60;;;;-1:-1:-1;;;;;;;4535:797:19:o;1236:165:51:-;1294:7;1322:1;1317;:6;;1309:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1376:5:51;;;1236:165::o;22818:1521:17:-;23069:13;23079:2;23069:9;:13::i;:::-;23061:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23129:16;23139:5;23129:9;:16::i;:::-;23121:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23187:24;23197:13;23187:9;:24::i;:::-;23179:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23261:23;23271:12;23261:9;:23::i;:::-;23253:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23719:56;23756:1;23759:2;23763:1;23766:8;23719:36;:56::i;:::-;23702:119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23916:22;;:::i;:::-;23941:21;23953:2;23957:4;23941:11;:21::i;:::-;23916:46;;24054:19;;:::i;:::-;24076:80;24103:1;24106:5;24113:13;24128:1;24131:4;24137:12;24151:4;24076:17;:80::i;:::-;24054:102;;24215:16;24234:51;24256:4;24262:2;24266:5;24273:8;24283:1;24234:21;:51::i;:::-;24215:70;;24306:8;24301:1;:13;24293:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22818:1521;;;;;;;;;;;;:::o;1095:231:20:-;1268:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;1268:51:20;;;;;;1258:62;;;;;;1095:231::o;9657:135:17:-;9770:4;;;;9720;;7587:66;;9770:4;9757:30;9739:14;9748:1;9750;9748:4;;;;;9739:8;:14::i;:::-;:48;;9657:135;-1:-1:-1;;9657:135:17:o;18871:1044::-;19011:4;19099:23;;;19091:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19157:4;;;;19146:7;;19157:8;;:13;19156:25;;19179:2;19156:25;;;19174:2;19156:25;19146:35;-1:-1:-1;19218:18:17;7353:66;19274:1;19268;19270;19268:4;;;;19261:28;19353:4;;7353:66;19247:42;;;;-1:-1:-1;19239:51:17;;7353:66;19350:1;19343:28;19849:4;;19816:56;;;19335:37;19816:56;;;19849:4;19816:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19335:37;;-1:-1:-1;19335:37:17;;19816:56;;;;;;;19849:4;;-1:-1:-1;19816:56:17;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;19816:56:17;;;;;19887:21;;;;;;;;;-1:-1:-1;;;;;;18871:1044:17;;;;;;:::o;11831:369::-;11916:20;;:::i;:::-;11951:137;11057:1;12077:2;12081:5;11978:109;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11978:109:17;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11978:109:17;;;11951:26;:137::i;:::-;11946:142;;12096:98;12104:13;12114:2;12104:9;:13::i;:::-;12096:98;;12178:5;;12161:23;;;12178:5;12161:23;;;;;;;;;26:21:-1;;;22:32;;;6:49;;12161:23:17;;;;12134:51;;:26;:51::i;:::-;12129:56;;12096:98;;20398:572;20605:17;;:::i;:::-;20657:13;;20641;;7587:66;;20641:29;;20640:44;20632:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20754:30;20766:2;20770:1;20773:10;20754:11;:30::i;:::-;20746:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20838:30;20850:2;20854:1;20857:10;20838:11;:30::i;:::-;20830:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20922:41;20934:10;20946;20958:4;20922:11;:41::i;:::-;20915:48;20398:572;-1:-1:-1;;;;;;;;20398:572:17:o;21877:358::-;22054:9;21158:1;22197:4;22203:2;22207:5;22214:1;22217:8;22107:119;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22107:119:17;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22107:119:17;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22107:119:17;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;22107:119:17;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;22107:119:17;;;22097:130;;;;;;22080:148;;22073:155;;21877:358;;;;;;;:::o;9362:259::-;9414:7;;7587:66;;9547:1;9544;9537:24;9534:1;9527:47;9510:64;-1:-1:-1;7587:66:17;9602:1;9594:6;9587:29;9580:36;9362:259;-1:-1:-1;;;9362:259:17:o;10655:244::-;10734:19;;:::i;:::-;10770:12;10780:1;10770:9;:12::i;:::-;10763:19;;10797:26;10808:14;10763:1;10765;10817:4;;10808:14;10797:10;:26::i;:::-;10790:4;;;:33;;;10842:1;;10835:8;10847:1;10835:13;10831:62;;;10880:4;;;;;7587:66;10867:17;10860:24;;10880:1;10655:244;-1:-1:-1;10655:244:17:o;12692:978::-;12814:13;12845:11;12837:20;;12:1:-1;9;2:12;12837:20:17;12914:15;;;12975;;;12902:9;;12975:19;;:24;:34;;13007:2;12975:34;;;13002:2;12975:34;12965:44;-1:-1:-1;13358:20:17;7353:66;13404:1;13396:6;13389:30;13443:50;;;13381:39;13443:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13381:39;;-1:-1:-1;13381:39:17;13443:50;;;;;;;;;-1:-1:-1;13443:50:17;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13443:50:17;;;;;;;;13426:67;;13559:16;13621:7;13604:25;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;13604:25:17;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;13604:25:17;;;13594:36;;;;;;13586:45;;13559:73;;13656:8;13646:18;;:6;:18;;;13638:27;;;;;;;12692:978;;;;;:::o;18233:519::-;18344:17;;:::i;:::-;18442:5;;;18449;;;;18456;;18463;;;;18369:9;;;;;;18426:43;;18449:5;;18456;18426:15;:43::i;:::-;18414:55;;-1:-1:-1;18414:55:17;-1:-1:-1;18414:55:17;-1:-1:-1;7587:66:17;18493:4;18490:1;18483:27;18514:1;18483:32;18475:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18682:65;;;;;;;;7587:66;18690:27;;;;;18700:4;18697:1;18690:27;18682:65;;;;7587:66;18729:4;18726:1;18719:27;18682:65;;;18233:519;-1:-1:-1;;;;;;;18233:519:17:o;9847:394::-;9936:12;;;;;;10152:85;7587:66;10159:2;:16;10152:85;;10208:20;;;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;10208:20:17;;;;;;10198:31;;;;;10152:85;;9197:105;9251:7;9273:24;9283:1;9111:21;9273:9;:24::i;15968:1996::-;16067:10;;;16809:1;;16067:10;7587:66;16928:2;7587:66;16915:15;16911:2;16904:39;16891:52;-1:-1:-1;16951:10:17;7587:66;16988:2;7587:66;16975:15;16971:2;16964:39;16951:52;;17012:10;17126:29;17140:2;17144;17148;17152;17126:13;:29::i;:::-;17115:40;;-1:-1:-1;17115:40:17;-1:-1:-1;17197:29:17;17115:40;;17219:2;17223;17197:13;:29::i;:::-;17186:40;;-1:-1:-1;17186:40:17;-1:-1:-1;17271:29:17;17186:40;;17293:2;17297;17271:13;:29::i;:::-;17260:40;;-1:-1:-1;17260:40:17;-1:-1:-1;17338:10:17;17454:29;17468:2;17472;17260:40;;17454:13;:29::i;:::-;17443:40;;-1:-1:-1;17443:40:17;-1:-1:-1;17511:29:17;17443:40;;17533:2;17537;17511:13;:29::i;:::-;17500:40;;-1:-1:-1;17500:40:17;-1:-1:-1;17587:29:17;17500:40;;17609:2;17613;17587:13;:29::i;:::-;17576:40;;-1:-1:-1;17576:40:17;-1:-1:-1;17660:8:17;;;17656:302;;7587:66;17758:2;17754;17747:26;17742:31;-1:-1:-1;7587:66:17;17799:2;17795;17788:26;17783:31;-1:-1:-1;7587:66:17;17840:2;17836;17829:26;17824:31;;17656:302;;;17947:2;17942:7;;17656:302;15968:1996;;;;;;;;;;;;;;:::o;7826:1072::-;7904:22;7936:18;7962:41;;:::i;:::-;7702:4;8011:46;;;8084:26;;;:46;;;8161:26;;;:46;8237:26;;;:33;;;8278:26;;;:37;;;7587:66;8323:26;;;:39;8370:24;;:::i;:::-;8740:4;8724:6;8649:4;8616:23;8552:4;8496:6;8476:325;8462:339;-1:-1:-1;8820:15:17;8816:52;;8838:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8816:52;8882:9;;;-1:-1:-1;;;;;7826:1072:17:o;14164:203::-;14261:10;;7587:66;14316:2;14312;14305:26;7587:66;14344:2;14340;14333:26;14293:67;;;;-1:-1:-1;14164:203:17;-1:-1:-1;;;;;14164:203:17:o;13760:318::-;13857:10;;;7587:66;13915:2;13911;13904:26;13889:41;-1:-1:-1;13938:12:17;7587:66;13977:2;13973;7587:66;13960:15;13953:39;13938:54;-1:-1:-1;7587:66:17;14025:4;14019;14012:30;7587:66;14055:2;14051;14044:26;14000:71;;;;-1:-1:-1;13760:318:17;-1:-1:-1;;;;;;;13760:318:17:o;310:8733:19:-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;310:8733:19;;;-1:-1:-1;;310:8733:19:o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;310:8733:19;;;-1:-1:-1;;310:8733:19:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;310:8733:19;;;-1:-1:-1;;310:8733:19:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;310:8733:19;;;-1:-1:-1;;310:8733:19:o"
			},
			"methodIdentifiers": {
				"callbacks(bytes32)": "21f36509",
				"fulfillRandomnessRequest(bytes)": "5e1c1059",
				"hashOfKey(uint256[2])": "caf70c4a",
				"onTokenTransfer(address,uint256,bytes)": "a4c0ed36",
				"registerProvingKey(uint256,address,uint256[2],bytes32)": "d8340209",
				"serviceAgreements(bytes32)": "75d35070",
				"withdraw(address,uint256)": "f3fef3a3",
				"withdrawableTokens(address)": "006f6ad0"
			}
		},
		"metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewServiceAgreement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"jobID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomnessFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"fulfillRandomnessRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_publicKey\",\"type\":\"uint256[2]\"}],\"name\":\"hashOfKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"_publicProvingKey\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"_jobID\",\"type\":\"bytes32\"}],\"name\":\"registerProvingKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"serviceAgreements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vRFOracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"jobID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"fulfillRandomnessRequest(bytes)\":{\"details\":\"This is the main entrypoint for chainlink. If you change this, youshould also change the solidityABISstring in solidity_proof.go.\",\"params\":{\"_proof\":\"the proof of randomness. Actual random output built from this\"}},\"hashOfKey(uint256[2])\":{\"params\":{\"_publicKey\":\"the key to return the address for\"}},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"To invoke this, use the requestRandomness method in VRFConsumerBase.The VRFCoordinator will call back to the calling contract when theoracle responds, on the method fulfillRandomness. SeeVRFConsumerBase.fullfilRandomnessRequest for its signature. Yourconsuming contract should inherit from VRFConsumerBase, and implementfullfilRandomnessRequest.\",\"params\":{\"_data\":\"abi-encoded call to randomnessRequest\",\"_fee\":\"amount of LINK sent\",\"_sender\":\"address: who sent the LINK (must be a contract)\"}},\"registerProvingKey(uint256,address,uint256[2],bytes32)\":{\"params\":{\"_fee\":\"minimum LINK payment required to serve randomness\",\"_jobID\":\"ID of the corresponding chainlink job in the oracle's db\",\"_oracle\":\"the address of the Chainlink node with the proving key and job\",\"_publicProvingKey\":\"public key used to prove randomness\"}},\"withdraw(address,uint256)\":{\"details\":\"Allows the oracle operator to withdraw their LINK\",\"params\":{\"_amount\":\"is the amount of LINK transfered from the Coordinator contract\",\"_recipient\":\"is the address the funds will be sent to\"}}},\"title\":\"VRFCoordinator coordinates on-chain verifiable-randomness requestswith off-chain responses\"},\"userdoc\":{\"methods\":{\"fulfillRandomnessRequest(bytes)\":{\"notice\":\"Called by the chainlink node to fullfil requests\"},\"hashOfKey(uint256[2])\":{\"notice\":\"Returns the serviceAgreements key associated with this public key\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called by LINK.transferAndCall, on successful LINK transfer\"},\"registerProvingKey(uint256,address,uint256[2],bytes32)\":{\"notice\":\"Commits calling address to serve randomness\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFCoordinator.sol\":\"VRFCoordinator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRF.sol\":{\"keccak256\":\"0x064fd513b2a85b1700de24f9f0b7e6e1b8d8213f1817dad8c09647e1f6e5b518\",\"urls\":[\"bzz-raw://f87a86ab1a35665ec8922bdbe7ff2b2286e9f67e399ad6548bb125a7689ddbbd\",\"dweb:/ipfs/QmQAXdMxRTAgbUCVVAqYBZHDXy36wotkqASLp1tULqr6qM\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFConsumerBase.sol\":{\"keccak256\":\"0x183dc62c0b4490931e4c847e9e6a0a1e84d4f2ddfe2ab5cff44c7f1b2c848582\",\"urls\":[\"bzz-raw://d1c3ba3193145f2df8c10395887ee7f2e2ad33418fe8f0e86110e8321e6a70e0\",\"dweb:/ipfs/QmeiwQm3tioeLPUmCpJSWeKUi7LcB8gQgaFX34xwF7fqFW\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFCoordinator.sol\":{\"keccak256\":\"0x7396ca55e84f549f7b0d1b6251e22399cf92f1edeed08e8d6293afd1a654dd39\",\"urls\":[\"bzz-raw://f748b64eeb85d218ec1d629e239776070fb2d6ca125734757346431fe36b84a8\",\"dweb:/ipfs/QmVs8qMhTLX87uDMb2sakVw47epvcLbnDTK2SfCLoDXhct\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/VRFRequestIDBase.sol\":{\"keccak256\":\"0x49fd3481ccbfedaedc2072f3338a873009e497a15279c857239c59cbf417ab9a\",\"urls\":[\"bzz-raw://78114391bf17e3fcbaa66b5fe75458d1b0621f5ede7394ce5baaa6042ab922a5\",\"dweb:/ipfs/QmUkrvFsVuXPWjjUtT8SbDkicWcmEn6GsbXkoEsopj3g7y\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"keccak256\":\"0xdbf46b45a4c9f38ba71a0391aed0e7b108854b619f292d907ae537228868bda6\",\"urls\":[\"bzz-raw://3ae40466809630c4731e2e3a697d6885727c577aaf260766c8a2f534ad3f6ee8\",\"dweb:/ipfs/QmTzpN5yP4Y5jvQ1ohfXFrce3sjzUiSChYJgZj9VvhVohG\"]},\"/Users/steve/workspace/chainlink/evm-contracts/src/v0.6/vendor/SafeMath.sol\":{\"keccak256\":\"0x95dbe2dd5ab8682b99bc3d7d297b621d4237442da160f78d3323ee5c4a06ded3\",\"urls\":[\"bzz-raw://d753308ff4eb43fba6f9ede371a33f707c5818350770dcb078a7d78ac8251361\",\"dweb:/ipfs/Qme64eYKWoTQiP3WhqGHoMqrENNZ9L8SdBLQ2hx5SmzUda\"]}},\"version\":1}",
		"userdoc": {
			"methods": {
				"fulfillRandomnessRequest(bytes)": {
					"notice": "Called by the chainlink node to fullfil requests"
				},
				"hashOfKey(uint256[2])": {
					"notice": "Returns the serviceAgreements key associated with this public key"
				},
				"onTokenTransfer(address,uint256,bytes)": {
					"notice": "Called by LINK.transferAndCall, on successful LINK transfer"
				},
				"registerProvingKey(uint256,address,uint256[2],bytes32)": {
					"notice": "Commits calling address to serve randomness"
				}
			}
		}
	},
	"sources": {
		"VRFCoordinator.sol": {
			"id": 19
		},
		"vendor/SafeMath.sol": {
			"id": 51
		},
		"interfaces/LinkTokenInterface.sol": {
			"id": 28
		},
		"VRF.sol": {
			"id": 17
		},
		"VRFRequestIDBase.sol": {
			"id": 20
		},
		"VRFConsumerBase.sol": {
			"id": 18
		}
	},
	"sourceCodes": {
		"VRFCoordinator.sol": "pragma solidity 0.6.6;\n\nimport \"./vendor/SafeMath.sol\";\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRF.sol\";\nimport \"./VRFRequestIDBase.sol\";\nimport \"./VRFConsumerBase.sol\";\n\n/**\n * @title VRFCoordinator coordinates on-chain verifiable-randomness requests\n * @title with off-chain responses\n */\ncontract VRFCoordinator is VRF, VRFRequestIDBase {\n\n  using SafeMath for uint256;\n\n  LinkTokenInterface internal LINK;\n\n  constructor(address _link) public {\n    LINK = LinkTokenInterface(_link);\n  }\n\n  struct Callback { // Tracks an ongoing request\n    address callbackContract; // Requesting contract, which will receive response\n    uint256 randomnessFee; // Amount of LINK paid at request time\n    // Seed for the *oracle* to use in generating this random value. It is the\n    // hash of the seed provided as input during a randomnessRequest, plus the\n    // address of the contract making the request, plus an increasing nonce\n    // specific to the VRF proving key and the calling contract. Including this\n    // extra data in the VRF input seed helps to prevent unauthorized queries\n    // against a VRF by any party who has prior knowledge of the requester's\n    // prospective seed. Only the specified contract can make that request.\n    uint256 seed;\n  }\n\n  struct ServiceAgreement { // Tracks oracle commitments to VRF service\n    address vRFOracle; // Oracle committing to respond with VRF service\n    bytes32 jobID; // ID of corresponding chainlink job in oracle's DB\n    uint256 fee; // Minimum payment for oracle response\n  }\n\n  mapping(bytes32 /* (provingKey, seed) */ => Callback) public callbacks;\n  mapping(bytes32 /* provingKey */ => ServiceAgreement)\n    public serviceAgreements;\n  mapping(address /* oracle */ => uint256 /* LINK balance */)\n    public withdrawableTokens;\n  mapping(bytes32 /* provingKey */ => mapping(address /* consumer */ => uint256))\n    private nonces;\n\n  // The oracle only needs the jobID to look up the VRF, but specifying public\n  // key as well prevents a malicious oracle from inducing VRF outputs from\n  // another oracle by reusing the jobID.\n  event RandomnessRequest(\n    bytes32 keyHash,\n    uint256 seed,\n    bytes32 indexed jobID,\n    address sender,\n    uint256 fee);\n\n  event NewServiceAgreement(bytes32 keyHash, uint256 fee);\n\n  /**\n   * @notice Commits calling address to serve randomness\n   * @param _fee minimum LINK payment required to serve randomness\n   * @param _oracle the address of the Chainlink node with the proving key and job\n   * @param _publicProvingKey public key used to prove randomness\n   * @param _jobID ID of the corresponding chainlink job in the oracle's db\n   */\n  function registerProvingKey(\n    uint256 _fee, address _oracle, uint256[2] calldata _publicProvingKey, bytes32 _jobID\n  )\n    external\n  {\n    bytes32 keyHash = hashOfKey(_publicProvingKey);\n    address oldVRFOracle = serviceAgreements[keyHash].vRFOracle;\n    require(oldVRFOracle == address(0), \"please register a new key\");\n    require(_oracle != address(0), \"_oracle must not be 0x0\");\n    serviceAgreements[keyHash].vRFOracle = _oracle;\n    serviceAgreements[keyHash].jobID = _jobID;\n    serviceAgreements[keyHash].fee = _fee;\n    emit NewServiceAgreement(keyHash, _fee);\n  }\n\n  /**\n   * @notice Called by LINK.transferAndCall, on successful LINK transfer\n   *\n   * @dev To invoke this, use the requestRandomness method in VRFConsumerBase.\n   *\n   * @dev The VRFCoordinator will call back to the calling contract when the\n   * @dev oracle responds, on the method fulfillRandomness. See\n   * @dev VRFConsumerBase.fullfilRandomnessRequest for its signature. Your\n   * @dev consuming contract should inherit from VRFConsumerBase, and implement\n   * @dev fullfilRandomnessRequest.\n   *\n   * @param _sender address: who sent the LINK (must be a contract)\n   * @param _fee amount of LINK sent\n   * @param _data abi-encoded call to randomnessRequest\n   */\n  function onTokenTransfer(address _sender, uint256 _fee, bytes memory _data)\n    public\n    onlyLINK\n  {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    randomnessRequest(keyHash, seed, _fee, _sender);\n  }\n\n  /**\n   * @notice creates the chainlink request for randomness\n   *\n   * @param _keyHash ID of the VRF public key against which to generate output\n   * @param _seed Input to the VRF, from which randomness is generated\n   * @param _feePaid Amount of LINK sent with request. Must exceed fee for key\n   * @param _sender Requesting contract; to be called back with VRF output\n   */\n  function randomnessRequest(\n    bytes32 _keyHash,\n    uint256 _seed,\n    uint256 _feePaid,\n    address _sender\n  )\n    internal\n    sufficientLINK(_feePaid, _keyHash)\n  {\n    uint256 nonce = nonces[_keyHash][_sender];\n    uint256 seed = makeVRFInputSeed(_keyHash, _seed, _sender, nonce);\n    bytes32 requestId = makeRequestId(_keyHash, seed);\n    // Cryptographically guaranteed by seed including an increasing nonce\n    assert(callbacks[requestId].callbackContract == address(0));\n    callbacks[requestId].callbackContract = _sender;\n    callbacks[requestId].randomnessFee = _feePaid;\n    callbacks[requestId].seed = seed;\n    emit RandomnessRequest(_keyHash, seed, serviceAgreements[_keyHash].jobID,\n      _sender, _feePaid);\n    nonces[_keyHash][_sender] = nonces[_keyHash][_sender].add(1);\n  }\n\n  /**\n   * @notice Called by the chainlink node to fullfil requests\n   * @param _proof the proof of randomness. Actual random output built from this\n   *\n   * @dev This is the main entrypoint for chainlink. If you change this, you\n   * @dev should also change the solidityABISstring in solidity_proof.go.\n   */\n  function fulfillRandomnessRequest(bytes memory _proof) public returns (bool) {\n    // TODO(alx): Replace the public key in the above proof with an argument\n    // specifying the keyHash. Splice the key in here before sending it to\n    // VRF.sol. Should be able to save about 2,000 gas that way.\n    // https://www.pivotaltracker.com/story/show/170828567\n    //\n    // TODO(alx): Move this parsing into VRF.sol, where the bytes layout is recorded.\n    // https://www.pivotaltracker.com/story/show/170828697\n    uint256[2] memory publicKey;\n    uint256 seed;\n    // solhint-disable-next-line no-inline-assembly\n    assembly { // Extract the public key and seed from proof\n      publicKey := add(_proof, 0x20) // Skip length word for first 64 bytes\n      seed := mload(add(_proof, 0xe0)) // Seed is 7th word in proof, plus word for length\n    }\n    bytes32 currentKeyHash = hashOfKey(publicKey);\n    bytes32 requestId = makeRequestId(currentKeyHash, seed);\n    Callback memory callback = callbacks[requestId];\n    require(callback.callbackContract != address(0), \"no corresponding request\");\n    uint256 randomness = VRF.randomValueFromVRFProof(_proof); // Reverts on failure\n    address oadd = serviceAgreements[currentKeyHash].vRFOracle;\n    withdrawableTokens[oadd] = withdrawableTokens[oadd].add(callback.randomnessFee);\n    // Dummy variable; allows access to method selector in next line. See\n    // https://github.com/ethereum/solidity/issues/3506#issuecomment-553727797\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(\n      v.rawFulfillRandomness.selector, requestId, randomness);\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success,) = callback.callbackContract.call(resp);\n    delete callbacks[requestId]; // Be a good ethereum citizen\n    return success;\n  }\n\n  /**\n   * @dev Allows the oracle operator to withdraw their LINK\n   * @param _recipient is the address the funds will be sent to\n   * @param _amount is the amount of LINK transfered from the Coordinator contract\n   */\n  function withdraw(address _recipient, uint256 _amount)\n    external\n    hasAvailableFunds(_amount)\n  {\n    withdrawableTokens[msg.sender] = withdrawableTokens[msg.sender].sub(_amount);\n    assert(LINK.transfer(_recipient, _amount));\n  }\n\n  /**\n   * @notice Returns the serviceAgreements key associated with this public key\n   * @param _publicKey the key to return the address for\n   */\n  function hashOfKey(uint256[2] memory _publicKey) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_publicKey));\n  }\n\n  /**\n   * @dev Reverts if amount is not at least what was agreed upon in the service agreement\n   * @param _feePaid The payment for the request\n   * @param _keyHash The key which the request is for\n   */\n  modifier sufficientLINK(uint256 _feePaid, bytes32 _keyHash) {\n    require(_feePaid >= serviceAgreements[_keyHash].fee, \"Below agreed payment\");\n    _;\n  }\n\n/**\n   * @dev Reverts if not sent from the LINK token\n   */\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n\n  /**\n   * @dev Reverts if amount requested is greater than withdrawable balance\n   * @param _amount The given amount to compare to `withdrawableTokens`\n   */\n  modifier hasAvailableFunds(uint256 _amount) {\n    require(withdrawableTokens[msg.sender] >= _amount, \"can't withdraw more than balance\");\n    _;\n  }\n\n}\n",
		"vendor/SafeMath.sol": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n  /**\n    * @dev Returns the addition of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `+` operator.\n    *\n    * Requirements:\n    * - Addition cannot overflow.\n    */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, \"SafeMath: addition overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the subtraction of two unsigned integers, reverting on\n    * overflow (when the result is negative).\n    *\n    * Counterpart to Solidity's `-` operator.\n    *\n    * Requirements:\n    * - Subtraction cannot overflow.\n    */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a, \"SafeMath: subtraction overflow\");\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the multiplication of two unsigned integers, reverting on\n    * overflow.\n    *\n    * Counterpart to Solidity's `*` operator.\n    *\n    * Requirements:\n    * - Multiplication cannot overflow.\n    */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, \"SafeMath: multiplication overflow\");\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the integer division of two unsigned integers. Reverts on\n    * division by zero. The result is rounded towards zero.\n    *\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n    * uses an invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n    require(b > 0, \"SafeMath: division by zero\");\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n    * Reverts when dividing by zero.\n    *\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\n    * invalid opcode to revert (consuming all remaining gas).\n    *\n    * Requirements:\n    * - The divisor cannot be zero.\n    */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0, \"SafeMath: modulo by zero\");\n    return a % b;\n  }\n}\n",
		"interfaces/LinkTokenInterface.sol": "pragma solidity ^0.6.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function decimals() external view returns (uint8 decimalPlaces);\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n  function name() external view returns (string memory tokenName);\n  function symbol() external view returns (string memory tokenSymbol);\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n",
		"VRF.sol": "pragma solidity 0.6.6;\n\n/** ****************************************************************************\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n\n  * @dev Bibliographic references:\n\n  * @dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n\n  * @dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n  * ****************************************************************************\n  * @dev USAGE\n\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\n  * ****************************************************************************\n  * @dev PURPOSE\n\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\n  * @dev Reggie, he gives back a value which is computed completely\n  * @dev deterministically from the seed and the secret key.\n\n  * @dev Reggie provides a proof by which Vera can verify that the output was\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\n  * @dev the output is computationally indistinguishable to her from a uniform\n  * @dev random sample from the output space.\n\n  * @dev The purpose of this contract is to perform that verification.\n  * ****************************************************************************\n  * @dev DESIGN NOTES\n\n  * @dev The VRF algorithm verified here satisfies the full unqiqueness, full\n  * @dev collision resistance, and full pseudorandomness security properties.\n  * @dev See \"SECURITY PROPERTIES\" below, and\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n\n  * @dev An elliptic curve point is generally represented in the solidity code\n  * @dev as a uint256[2], corresponding to its affine coordinates in\n  * @dev GF(FIELD_SIZE).\n\n  * @dev For the sake of efficiency, this implementation deviates from the spec\n  * @dev in some minor ways:\n\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\n\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\n  * @dev   nonce updated until a valid x-ordinate is found.\n\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\n  * @dev   in the hash message, as recommended in step 5.B of the draft\n  * @dev   standard. They are unnecessary here because no variation in the\n  * @dev   cipher suite is allowed.\n\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\n  * @dev   points, not the compressed points as recommended in step 3.\n\n  * @dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\n  * @dev   generator point, see steps 5 and 7 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n  * @dev   keccak hash of the original u. This is because we only verify the\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\n  * ****************************************************************************\n  * @dev   SECURITY PROPERTIES\n\n  * @dev Here are the security properties for this VRF:\n\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\n  * @dev   the sense that the proof will pass verifyVRFProof.\n\n  * @dev Full collision resistance: It's cryptographically infeasible to find\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\n\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n  * @dev   derived from a given seed, the outputs are computationally\n  * @dev   indistinguishable from randomness.\n\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n  * @dev for these properties.\n\n  * @dev For secp256k1, the key validation described in section\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\n  * @dev representation of the public key used here (affine x- and y-ordinates\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n  * @dev the point at infinity.\n  * ****************************************************************************\n  * @dev OTHER SECURITY CONSIDERATIONS\n  *\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\n  * @dev However, under the Random Oracle Model the probability of choosing a\n  * @dev point which forces n extra rounds in hashToCurve is 2⁻ⁿ. The base cost\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\n  * @dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n  * @dev forseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n  * @dev this means it is infeasible for an adversary to prevent correct\n  * @dev operation of this contract by choosing an adverse seed.\n\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n  * @dev hashToCurve.)\n\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\n  * @dev See notes in hashToCurve docstring.\n*/\ncontract VRF {\n\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\n  uint256 constant private GROUP_ORDER = // Number of points in Secp256k1\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n  // Prime characteristic of the galois field over which Secp256k1 is defined\n  uint256 constant private FIELD_SIZE =\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n  uint256 constant private WORD_LENGTH_BYTES = 0x20;\n\n  // (base^exponent) % FIELD_SIZE\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n  function bigModExp(uint256 base, uint256 exponent)\n    internal view returns (uint256 exponentiation) {\n      uint256 callResult;\n      uint256[6] memory bigModExpContractInputs;\n      bigModExpContractInputs[0] = WORD_LENGTH_BYTES;  // Length of base\n      bigModExpContractInputs[1] = WORD_LENGTH_BYTES;  // Length of exponent\n      bigModExpContractInputs[2] = WORD_LENGTH_BYTES;  // Length of modulus\n      bigModExpContractInputs[3] = base;\n      bigModExpContractInputs[4] = exponent;\n      bigModExpContractInputs[5] = FIELD_SIZE;\n      uint256[1] memory output;\n      assembly { // solhint-disable-line no-inline-assembly\n      callResult := staticcall(\n        not(0),                   // Gas cost: no limit\n        0x05,                     // Bigmodexp contract address\n        bigModExpContractInputs,\n        0xc0,                     // Length of input segment: 6*0x20-bytes\n        output,\n        0x20                      // Length of output segment\n      )\n      }\n      if (callResult == 0) {revert(\"bigModExp failure!\");}\n      return output[0];\n    }\n\n  // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\n  uint256 constant private SQRT_POWER = (FIELD_SIZE + 1) >> 2;\n\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\n  function squareRoot(uint256 x) internal view returns (uint256) {\n    return bigModExp(x, SQRT_POWER);\n  }\n\n  // The value of y^2 given that (x,y) is on secp256k1.\n  function ySquared(uint256 x) internal pure returns (uint256) {\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\n    return addmod(xCubed, 7, FIELD_SIZE);\n  }\n\n  // True iff p is on secp256k1\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\n  }\n\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\n    x_ = uint256(keccak256(b));\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\n    // string_to_point in the IETF draft\n    while (x_ >= FIELD_SIZE) {\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\n    }\n  }\n\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\n  // is always even, due to\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  // step 5.C, which references arbitrary_string_to_point, defined in\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\n  // returning the point with given x ordinate, and even y ordinate.\n  function newCandidateSecp256k1Point(bytes memory b)\n    internal view returns (uint256[2] memory p) {\n      p[0] = fieldHash(b);\n      p[1] = squareRoot(ySquared(p[0]));\n      if (p[1] % 2 == 1) {\n        p[1] = FIELD_SIZE - p[1];\n      }\n    }\n\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\n  // vrf.go/hashToCurveHashPrefix\n  uint256 constant HASH_TO_CURVE_HASH_PREFIX = 1;\n\n  // Cryptographic hash function onto the curve.\n  //\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\n  // DESIGN NOTES above for slight differences.)\n  //\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\n  // \"Construction of Rational Points on Elliptic Curves over Finite Fields\"\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\n  // and suggested by\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\n  //\n  // This would greatly simplify the analysis in \"OTHER SECURITY CONSIDERATIONS\"\n  // https://www.pivotaltracker.com/story/show/171120900\n  function hashToCurve(uint256[2] memory pk, uint256 input)\n    internal view returns (uint256[2] memory rv) {\n      rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX,\n                                                       pk, input));\n      while (!isOnCurve(rv)) {\n        rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\n      }\n    }\n\n  /** *********************************************************************\n   * @notice Check that product==scalar*multiplicand\n   *\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n   *\n   * @param multiplicand: secp256k1 point\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\n   * @param product: secp256k1 expected to be mulitplier * multiplicand\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\n   */\n  function ecmulVerify(uint256[2] memory multiplicand, uint256 scalar,\n    uint256[2] memory product) internal pure returns(bool verifies)\n  {\n    require(scalar != 0); // Rules out an ecrecover failure case\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\n    // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\n    // Explicit conversion to address takes bottom 160 bits\n    address expected = address(uint256(keccak256(abi.encodePacked(product))));\n    return (actual == expected);\n  }\n\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\n  function projectiveSub(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\n    internal pure returns(uint256 x3, uint256 z3) {\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\n  function projectiveMul(uint256 x1, uint256 z1, uint256 x2, uint256 z2)\n    internal pure returns(uint256 x3, uint256 z3) {\n      (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n\n  /** **************************************************************************\n      @notice Computes elliptic-curve sum, in projective co-ordinates\n\n      @dev Using projective coordinates avoids costly divisions\n\n      @dev To use this with p and q in affine coordinates, call\n      @dev projectiveECAdd(px, py, qx, qy). This will return\n      @dev the addition of (px, py, 1) and (qx, qy, 1), in the\n      @dev secp256k1 group.\n\n      @dev This can be used to calculate the z which is the inverse to zInv\n      @dev in isValidVRFOutput. But consider using a faster\n      @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n\n      @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\n           coordinates of secp256k1 points. That is safe in this contract,\n           because this method is only used by linearCombination, which checks\n           points are on the curve via ecrecover.\n      **************************************************************************\n      @param px The first affine coordinate of the first summand\n      @param py The second affine coordinate of the first summand\n      @param qx The first affine coordinate of the second summand\n      @param qy The second affine coordinate of the second summand\n\n      (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\n      **************************************************************************\n      Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\n      on secp256k1, in P²(𝔽ₙ)\n      @return sx \n      @return sy\n      @return sz\n  */\n  function projectiveECAdd(uint256 px, uint256 py, uint256 qx, uint256 qy)\n    internal pure returns(uint256 sx, uint256 sy, uint256 sz) {\n      // See \"Group law for E/K : y^2 = x^3 + ax + b\", in section 3.1.2, p. 80,\n      // \"Guide to Elliptic Curve Cryptography\" by Hankerson, Menezes and Vanstone\n      // We take the equations there for (sx,sy), and homogenize them to\n      // projective coordinates. That way, no inverses are required, here, and we\n      // only need the one inverse in affineECAdd.\n\n      // We only need the \"point addition\" equations from Hankerson et al. Can\n      // skip the \"point doubling\" equations because p1 == p2 is cryptographically\n      // impossible, and require'd not to be the case in linearCombination.\n\n      // Add extra \"projective coordinate\" to the two points\n      (uint256 z1, uint256 z2) = (1, 1);\n\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\n\n      uint256 dx; // Accumulates denominator from sx calculation\n      // sx=((qy-py)/(qx-px))^2-px-qx\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\n\n      uint256 dy; // Accumulates denominator from sy calculation\n      // sy=((qy-py)/(qx-px))(px-sx)-py\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\n\n      if (dx != dy) { // Cross-multiply to put everything over a common denominator\n        sx = mulmod(sx, dy, FIELD_SIZE);\n        sy = mulmod(sy, dx, FIELD_SIZE);\n        sz = mulmod(dx, dy, FIELD_SIZE);\n      } else { // Already over a common denominator, use that for z ordinate\n        sz = dx;\n      }\n    }\n\n  // p1+p2, as affine points on secp256k1.\n  //\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\n  // It is computed off-chain to save gas.\n  //\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\n  // point doubling.\n  function affineECAdd(\n    uint256[2] memory p1, uint256[2] memory p2,\n    uint256 invZ) internal pure returns (uint256[2] memory) {\n    uint256 x;\n    uint256 y;\n    uint256 z;\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \"invZ must be inverse of z\");\n    // Clear the z ordinate of the projective representation by dividing through\n    // by it, to obtain the affine representation\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\n  }\n\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\n  // cryptographically high probability.)\n  function verifyLinearCombinationWithGenerator(\n    uint256 c, uint256[2] memory p, uint256 s, address lcWitness)\n    internal pure returns (bool) {\n      // Rule out ecrecover failure modes which return address 0.\n      require(lcWitness != address(0), \"bad witness\");\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n      // The point corresponding to the address returned by\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\n      // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\n      // See https://crypto.stackexchange.com/a/18106\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\n      return computed == lcWitness;\n    }\n\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\n  // requires cp1Witness != sp2Witness (which is fine for this application,\n  // since it is cryptographically impossible for them to be equal. In the\n  // (cryptographically impossible) case that a prover accidentally derives\n  // a proof with equal c*p1 and s*p2, they should retry with a different\n  // proof nonce.) Assumes that all points are on secp256k1\n  // (which is checked in verifyVRFProof below.)\n  function linearCombination(\n    uint256 c, uint256[2] memory p1, uint256[2] memory cp1Witness,\n    uint256 s, uint256[2] memory p2, uint256[2] memory sp2Witness,\n    uint256 zInv)\n    internal pure returns (uint256[2] memory) {\n      require((cp1Witness[0] - sp2Witness[0]) % FIELD_SIZE != 0,\n              \"points in sum must be distinct\");\n      require(ecmulVerify(p1, c, cp1Witness), \"First multiplication check failed\");\n      require(ecmulVerify(p2, s, sp2Witness), \"Second multiplication check failed\");\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\n    }\n\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\n  uint256 constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\n\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  // The draft calls (in step 7, via the definition of string_to_int, in\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\n  // first hash without checking that it corresponds to a number less than the\n  // group order, which will lead to a slight bias in the sample.\n  //\n  // TODO(alx): We could save a bit of gas by following the standard here and\n  // using the compressed representation of the points, if we collated the y\n  // parities into a single bytes32.\n  // https://www.pivotaltracker.com/story/show/171120588\n  function scalarFromCurvePoints(\n    uint256[2] memory hash, uint256[2] memory pk, uint256[2] memory gamma,\n    address uWitness, uint256[2] memory v)\n    internal pure returns (uint256 s) {\n      return uint256(\n        keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX,\n                                   hash, pk, gamma, v, uWitness)));\n    }\n\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\n  // and seed. zInv must be the inverse of the third ordinate from\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\n  // section 5.3 of the IETF draft.\n  //\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\n  // (which I could make a uint256 without using any extra space.) Would save\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\n  function verifyVRFProof(\n    uint256[2] memory pk, uint256[2] memory gamma, uint256 c, uint256 s,\n    uint256 seed, address uWitness, uint256[2] memory cGammaWitness,\n    uint256[2] memory sHashWitness, uint256 zInv)\n    internal view {\n      require(isOnCurve(pk), \"public key is not on curve\");\n      require(isOnCurve(gamma), \"gamma is not on curve\");\n      require(isOnCurve(cGammaWitness), \"cGammaWitness is not on curve\");\n      require(isOnCurve(sHashWitness), \"sHashWitness is not on curve\");\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\n      // we use the address of u instead of u itself. Also, here we add the\n      // terms instead of taking the difference, and in the proof consruction in\n      // vrf.GenerateProof, we correspondingly take the difference instead of\n      // taking the sum as they do in step 7 of section 5.1.)\n      require(\n        verifyLinearCombinationWithGenerator(c, pk, s, uWitness),\n        \"addr(c*pk+s*g)≠_uWitness\"\n      );\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\n      uint256[2] memory hash = hashToCurve(pk, seed);\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\n      uint256[2] memory v = linearCombination(\n        c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\n      // Steps 7. and 8. of IETF draft section 5.3\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\n      require(c == derivedC, \"invalid proof\");\n    }\n\n  // Domain-separation tag for the hash used as the final VRF output.\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\n  uint256 constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\n\n  // Length of proof marshaled to bytes array. Shows layout of proof\n  uint private constant PROOF_LENGTH = 64 + // PublicKey (uncompressed format.)\n    64 + // Gamma\n    32 + // C\n    32 + // S\n    32 + // Seed\n    0 + // Dummy entry: The following elements are included for gas efficiency:\n    32 + // uWitness (gets padded to 256 bits, even though it's only 160)\n    64 + // cGammaWitness\n    64 + // sHashWitness\n    32; // zInv  (Leave Output out, because that can be efficiently calculated)\n\n  /* ***************************************************************************\n   * @notice Returns proof's output, if proof is valid. Otherwise reverts\n\n   * @param proof A binary-encoded proof, as output by vrf.Proof.MarshalForSolidityVerifier\n   *\n   * Throws if proof is invalid, otherwise:\n   * @return output i.e., the random output implied by the proof\n   * ***************************************************************************\n   * @dev See the calculation of PROOF_LENGTH for the binary layout of proof.\n   */\n  function randomValueFromVRFProof(bytes memory proof)\n    internal view returns (uint256 output) {\n      require(proof.length == PROOF_LENGTH, \"wrong proof length\");\n\n      uint256[2] memory pk; // parse proof contents into these variables\n      uint256[2] memory gamma;\n      // c, s and seed combined (prevents \"stack too deep\" compilation error)\n      uint256[3] memory cSSeed;\n      address uWitness;\n      uint256[2] memory cGammaWitness;\n      uint256[2] memory sHashWitness;\n      uint256 zInv;\n      (pk, gamma, cSSeed, uWitness, cGammaWitness, sHashWitness, zInv) = abi.decode(\n        proof, (uint256[2], uint256[2], uint256[3], address, uint256[2],\n                uint256[2], uint256));\n      verifyVRFProof(\n        pk,\n        gamma,\n        cSSeed[0], // c\n        cSSeed[1], // s\n        cSSeed[2], // seed\n        uWitness,\n        cGammaWitness,\n        sHashWitness,\n        zInv\n      );\n      output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, gamma)));\n    }\n}\n",
		"VRFRequestIDBase.sol": "pragma solidity ^0.6.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF\n   *\n   * @dev To prevent repetition of VRF output due to repetition against the\n   * @dev user-supplied seed, that seed is combined in a hash with the a\n   * @dev user-specific nonce, and the address of the consuming contract.\n   *\n   * @dev Of course, crucial security guranatees would be broken by repetition\n   * @dev of the user-supplied seed, as all the other inputs can be anticipated\n   * @dev and the user-specified seed is public once the initial request is\n   * @dev made, so if the oracle has reason to belive that a user-specified seed\n   * @dev will be repeated, it may be able to anticipate its future outputs. So\n   * @dev it may make sense, for certain applications, for the VRF framework to\n   * @dev simply refuse to operate, if given a seed it's seen before.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\n    address _requester, uint256 _nonce)\n    internal pure returns (uint256)\n  {\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n",
		"VRFConsumerBase.sol": "pragma solidity ^0.6.0;\n\nimport { SafeMath as SafeMath_Chainlink } from \"./vendor/SafeMath.sol\";\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerInterface, and can\n * @dev initialize VRFConsumerInterface's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev To increase trust in your contract, the source of your seeds should be\n * @dev hard for anyone to influence or predict. Any party who can influence\n * @dev them could in principle collude with the oracle (who can instantly\n * @dev compute the VRF output for any given seed) to bias the outcomes from\n * @dev your contract in their favor. For instance, the block hash is a natural\n * @dev choice of seed for many applications, but miners in control of a\n * @dev substantial fraction of hashing power and with access to VRF outputs\n * @dev could check the result of prospective block hashes as they are mined,\n * @dev and decide not to publish a block if they don't like the outcome it will\n * @dev lead to.\n *\n * @dev On the other hand, using block hashes as the seed makes it particularly\n * @dev easy to estimate the economic cost to a miner for this kind of cheating\n * @dev (namely, the block reward and transaction fees they forgo by refraining\n * @dev from publishing a block.)\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  using SafeMath_Chainlink for uint256;\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it.\n   *\n   * @dev The VRFCoordinator expects a calling contract to have a method with\n   * @dev this signature, and will trigger it once it has verified the proof\n   * @dev associated with the randomness (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\n    internal virtual;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The source of the seed data must be something which the oracle\n   * @dev cannot anticipate. See \"SECURITY CONSIDERATIONS\" above.\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   * @param _seed Random seed from which output randomness is determined\n   *\n   * @return requestId which will be returned with the response to this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to *\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\n    public returns (bytes32 requestId)\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\n    // This is the seed actually passed to the VRF in VRFCoordinator\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest)\n    nonces[_keyHash] = nonces[_keyHash].add(1); \n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal LINK;\n  address internal vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) public nonces;\n  constructor(address _vrfCoordinator, address _link) public {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
	},
	"sourceTreeHashHex": "0x6b9def3952a0fef9cdaa6d86aa931f6154015df0b987b5ea6d0eec2abeda1263",
	"compiler": {
		"name": "solc",
		"version": "soljson-v0.6.6+commit.6c089d02.js",
		"settings": {
			"optimizer": {
				"runs": 1000000,
				"enabled": true
			},
			"outputSelection": {
				"*": {
					"*": [
						"abi",
						"devdoc",
						"userdoc",
						"evm.bytecode.object",
						"evm.bytecode.sourceMap",
						"evm.deployedBytecode.object",
						"evm.deployedBytecode.sourceMap",
						"evm.methodIdentifiers",
						"metadata"
					]
				}
			},
			"remappings": []
		}
	},
	"chains": {}
}